runif(1,6)
runif(1,1,6)
runif(1,1,6)
f <- function(x) { return 1/x; }
f <- function(x) { return(1/x); }
f(3)
f(1/2)
x <- 1:10
y <- 10^x
plot(x,y)
y <- y^(-1)
plot(x,y)
y <- 10^(x/5)
plot(x,y)
y <- 10^(-x/5)
plot(x,y)
y <- 10^(-x/2)
plot(x,y)
x <- 1:100
y <- 2^(x/10)
plot(x,y)
plot(x,1000-y)
plot(x,-y)
plot(x,y)
plot(100:1,y)
prog
library(rstan)
prog <-
'
data {
real<lower=0,upper=1> prev;
int acc_acc;
int acc_rej;
int rej_acc;
int rej_rej;
}
transformed data {
int y[4];
y[1] <- acc_acc;  y[2] <- acc_rej;
y[3] <- rej_acc;  y[4] <- rej_rej;
}
parameters {
real<lower=0,upper=1> tpr;
real<lower=0,upper=1> fpr;
}
transformed parameters {
simplex[4] theta;
theta[1] <- prev * tpr       * tpr       + (1 - prev) * fpr       * fpr
theta[2] <- prev * tpr       * (1 - tpr) + (1 - prev) * fpr       * (1 - fpr);
theta[3] <- prev * (1 - tpr) * tpr       + (1 - prev) * (1 - fpr) * fpr;
theta[4] <- prev * (1 - tpr)^2           + (1 - prev) * (1 - fpr) * (1 - fpr);
}
model {
y ~ multinomial(theta);
}
'
prog
prog <- "
data {
real<lower=0,upper=1> prev;
int acc_acc;
int acc_rej;
int rej_acc;
int rej_rej;
}
transformed data {
int y[4];
y[1] <- acc_acc;  y[2] <- acc_rej;
y[3] <- rej_acc;  y[4] <- rej_rej;
}
parameters {
real<lower=0,upper=1> tpr;
real<lower=0,upper=1> fpr;
}
transformed parameters {
simplex[4] theta;
theta[1] <- prev * tpr       * tpr       + (1 - prev) * fpr       * fpr
theta[2] <- prev * tpr       * (1 - tpr) + (1 - prev) * fpr       * (1 - fpr);
theta[3] <- prev * (1 - tpr) * tpr       + (1 - prev) * (1 - fpr) * fpr;
theta[4] <- prev * (1 - tpr)^2           + (1 - prev) * (1 - fpr) * (1 - fpr);
}
model {
y ~ multinomial(theta);
}
";
prog
data <- list(prev=0.225, acc_acc=16, acc_rej=21, rej_acc=22, rej_rej=107)
data
fit <- stan(model_code=prog, data=data);
prog <- "
data {
real<lower=0,upper=1> prev;
int acc_acc;
int acc_rej;
int rej_acc;
int rej_rej;
}
transformed data {
int y[4];
y[1] <- acc_acc;  y[2] <- acc_rej;
y[3] <- rej_acc;  y[4] <- rej_rej;
}
parameters {
real<lower=0,upper=1> tpr;
real<lower=0,upper=1> fpr;
}
transformed parameters {
simplex[4] theta;
theta[1] <- prev * tpr       * tpr       + (1 - prev) * fpr       * fpr;
theta[2] <- prev * tpr       * (1 - tpr) + (1 - prev) * fpr       * (1 - fpr);
theta[3] <- prev * (1 - tpr) * tpr       + (1 - prev) * (1 - fpr) * fpr;
theta[4] <- prev * (1 - tpr)^2           + (1 - prev) * (1 - fpr) * (1 - fpr);
}
model {
y ~ multinomial(theta);
}
";
fit <- stan(model_code=prog, data=data);
print(fit)
traceplot(fit,theta)
traceplot(fit,"theta")
hist(extract(fit)$tpr)
cell_counts < c(16,21,22,107);
theta_mle <- cell_counts / sum(cell_counts);
print("theta_mle=",theta_mle)
cell_counts <- c(16,21,22,107);
theta_mle <- cell_counts / sum(cell_counts);
print("theta_mle=",theta_mle);
theta_mle
print(theta_mle,digits=2,quotes=FALSE);
print(theta_mle,digits=1,quotes=FALSE);
print(theta_mle,digits=1,quotes=FALSE);
sprintf("theta_mle = [%5.2f %5.2f %5.2f %5.2f], theta_mle)
)
")
sprintf("theta_mle = [%5.2f %5.2f %5.2f %5.2f]", theta_mle);
sprintf("theta_mle = [%5.2f %5.2f %5.2f %5.2f]", theta_mle[1], theta_mle[2], theta_mle[3], theta_mle[4])
help(hist)
43/166
0.225 * 166
help(rbinom)
summary(rbinom(10000, 166, 0.225))
quantiles(rbinom(10000, 166, 0.225))
quantile()
help(quantile)
quantile(rbinom(10000, 166, 0.225), probs=c(0.025, 0.5, 0.975))
quantile(rbinom(10000, 166, 0.225), probs=c(0.025, 0.5, 0.975))
quantile(rbinom(100000, 166, 0.225), probs=c(0.025, 0.5, 0.975))
hist(rbinom(10000,166,0.225))
hist(rbinom(10000,166,0.225),breaks=10)
hist(rbinom(10000,166,0.225),breaks=20)
quantile(rbinom(10000, 166, 0.225), probs=c(0.025, 0.5, 0.975));
hist(rbinom(10000,166,0.225),breaks=20, main="Simulated Acceptance in Batch of 166", xlab="number accepted");
hist(rbinom(10000,166,0.225),breaks=20, main="Num Accepted ~ Binom(10000,0.225)", xlab="number accepted");
hist(rbinom(10000,166,0.225),breaks=20, main="10K Simulations of Binom(166,0.225)", xlab="num accepted");
hist(rbinom(10000,166,0.225),breaks=20, main="10,000 Sims of Binom(166,0.225)", xlab="num accepted");
hist(rbinom(10000,166,0.225),breaks=20, main="10,000 Sims of Binom(166, 0.225)", xlab="num accepted");
37/166
rmultinom()
help(rmultinom)
rmultinom(5,166,c(16,21,22,107)/166)
rmultinom(10,166,c(16,21,22,107)/166)
7314/1.22
7314/1.22/48
7314/1.22/48 * 30
library(rstan)
x_csv <- read.csv("http://esapubs.org/archive/ecol/E087/050/butterflyData.txt");
x_csv
head(x_csv)
source("fit-1pl-stan.R")
setwd("~/stan-dev/example-models/knitr/irt")
source('irt-1pl-sim.R')
y
mean(y)
source('fit-1pl-stan.R')
source('fit-1pl-stan.R')
theta[90:100]
print(fit,"b")
b
paste("b[", 1:10, "]")
print(fit, paste("b[", 1:10, "]")
)
traceplot(fit,"b[1]")
traceplot(fit, "lp__")
traceplot(fit, "lp__", inc_warmup=FALSE)
print(fit, "lp__")
print(fit, "theta[1]", "b[1]")
print(fit, c("lp__", paste("b[", 1:10, "]"), paste("theta[", 1:10, "]")));
print(b);
print(theta);
print(fit, c("lp__", paste("b[", 1:10, "]"), paste("theta[", 1:10, "]")));
print(b[1:10]);
print(theta[1:10]);
print(fit, c("lp__", paste("b[", 1:10, "]"), paste("theta[", 1:10, "]")));
print(fit, c(paste("b[", 1:10, "]"), paste("theta[", 1:10, "]"), "lp__"));
paste(c("a","b"), 1:5)
y_sep <- matrix(NA, I + 1, J);
y_sep[1:I, 1:J] <- y
I_sep <- I + 1
y_sep[I_sep,] <- rep(0, J);
fit <- sampling(model, data = list(I=I_sep, J=J, y=y_sep));
print(fit)
y_sep <- matrix(NA, I + 1, J);
y_sep[1:I, 1:J] <- y
I_sep <- I + 1
y_sep[I_sep,] <- rep(0, J);
fit <- stan("irt_1pl_mle.stan", data = list(I=I_sep, J=J, y=y_sep));
print(fit)
source('fit-1pl-separable-stan.R')
print(fit)
y[3,]
hist_theta_sim <- ggplot(data=data.frame(theta), aes(theta)) + geom_histogram();
library(ggplot2)
hist_theta_sim <- ggplot(data=data.frame(theta), aes(theta)) + geom_histogram();
hist_theta_sim
ggplot(data=data.frame(theta), aes(theta)) + geom_histogram(binwidth=0.5);
ggplot(data=data.frame(theta), aes(theta)) +
geom_histogram(binwidth=0.5, xlim=c(-5,5));
ggplot(data=data.frame(theta), aes(theta)) +
geom_histogram(binwidth=0.5, xlim=c(-5,5));
hist_theta_sim <-
ggplot(data=data.frame(theta), aes(theta)) +
geom_histogram(binwidth=0.5, xlim=c(-5,5));
hist_theta_sim
hist(theta)
ggplot(data=data.frame(theta), aes(theta)) +
geom_histogram(binwidth=0.5)
ggplot(data=data.frame(theta), aes(theta, colour=white)) +
geom_histogram(binwidth=0.5)
ggplot(data=data.frame(theta), aes(theta, colour="white")) +
geom_histogram(binwidth=0.5)
ggplot(data=data.frame(theta), aes(theta)) +
geom_histogram(binwidth=0.5, colour="white")
ggplot(data=data.frame(theta), aes(theta)) +
geom_histogram(binwidth=0.5, fill="white")
ggplot(data=data.frame(theta), aes(theta)) +
geom_histogram(binwidth=0.5, colour="black", fill="white")
ggplot(data=data.frame(theta), aes(theta)) +
geom_histogram(binwidth=0.5, colour="white", fill="gray")
ggplot(data=data.frame(theta), aes(theta)) +
geom_histogram(binwidth=0.5, colour="black", fill="gray")
ggplot(data=data.frame(theta), aes(theta)) +
geom_histogram(binwidth=0.5, colour="black", fill="white")
ggplot(data=data.frame(theta), aes(theta)) +
geom_histogram(binwidth=0.5, colour="black", fill="white");
ggplot(data=data.frame(b), aes(b)) +
geom_histogram(binwidth=0.5, colour="black", fill="white");
hist_b_sim <-
ggplot(data=data.frame(b), aes(b)) +
geom_histogram(binwidth=1, colour="black", fill="white");
hist_b_sim
ggplot(data=data.frame(b), aes(b)) +
geom_histogram(binwidth=2, colour="black", fill="white");
inv_logit_-1)
inv_logit(-1)
