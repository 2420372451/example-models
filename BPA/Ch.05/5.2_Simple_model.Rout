
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## 5. State-space models
> ## 5.2. A simple model
> 
> library(rstan)
Loading required package: ggplot2
rstan (Version 2.8.1, packaged: 2015-11-18 17:18:35 UTC, GitRev: 05c3d0058b6a)
For execution on a local, multicore CPU with excess RAM we recommend calling
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
> rstan_options(auto_write = TRUE)
> options(mc.cores = parallel::detectCores())
> set.seed(123)
> 
> ## Read data
> ## The data generation code is in bpa-code.txt, available at
> ## http://www.vogelwarte.ch/de/projekte/publikationen/bpa/complete-code-and-data-files-of-the-book.html
> stan_data <- read_rdump("ssm.data.R")
> 
> ## Parameters monitored
> params <- c("lambda", "mean_lambda", "sigma2_obs", "sigma2_proc",
+             "N_est")
> 
> ## MCMC settings
> ni <- 10000
> nt <- 5
> nb <- 5000
> nc <- 4
> 
> ## Initial values
> inits <- lapply(1:nc, function(i) {
+     list(sigma_proc = runif(1, 0, 5),
+          mean_lambda = runif(1, 0.1, 2),
+          sigma_obs = runif(1, 0, 10),
+          N_est1 = runif(1, 20, 40))})
> 
> ## Call Stan from R
> ssm <- stan("ssm.stan",
+             data = stan_data, init = inits, pars = params,
+             chains = nc, iter = ni, warmup = nb, thin = nt,
+             seed = 1,
+             control = list(adapt_delta = 0.999),
+             open_progress = FALSE)
starting worker pid=6806 on localhost:11574 at 21:20:44.782
starting worker pid=6814 on localhost:11574 at 21:20:44.921
starting worker pid=6822 on localhost:11574 at 21:20:45.061
starting worker pid=6830 on localhost:11574 at 21:20:45.204

SAMPLING FOR MODEL 'ssm' NOW (CHAIN 1).

Chain 1, Iteration:    1 / 10000 [  0%]  (Warmup)
SAMPLING FOR MODEL 'ssm' NOW (CHAIN 2).

Chain 2, Iteration:    1 / 10000 [  0%]  (Warmup)
SAMPLING FOR MODEL 'ssm' NOW (CHAIN 3).

Chain 3, Iteration:    1 / 10000 [  0%]  (Warmup)
Chain 1, Iteration: 1000 / 10000 [ 10%]  (Warmup)
SAMPLING FOR MODEL 'ssm' NOW (CHAIN 4).

Chain 4, Iteration:    1 / 10000 [  0%]  (Warmup)
Chain 2, Iteration: 1000 / 10000 [ 10%]  (Warmup)
Chain 3, Iteration: 1000 / 10000 [ 10%]  (Warmup)
Chain 1, Iteration: 2000 / 10000 [ 20%]  (Warmup)
Chain 4, Iteration: 1000 / 10000 [ 10%]  (Warmup)
Chain 2, Iteration: 2000 / 10000 [ 20%]  (Warmup)
Chain 3, Iteration: 2000 / 10000 [ 20%]  (Warmup)
Chain 1, Iteration: 3000 / 10000 [ 30%]  (Warmup)
Chain 4, Iteration: 2000 / 10000 [ 20%]  (Warmup)
Chain 2, Iteration: 3000 / 10000 [ 30%]  (Warmup)
Chain 3, Iteration: 3000 / 10000 [ 30%]  (Warmup)
Chain 4, Iteration: 3000 / 10000 [ 30%]  (Warmup)
Chain 1, Iteration: 4000 / 10000 [ 40%]  (Warmup)
Chain 2, Iteration: 4000 / 10000 [ 40%]  (Warmup)
Chain 3, Iteration: 4000 / 10000 [ 40%]  (Warmup)
Chain 4, Iteration: 4000 / 10000 [ 40%]  (Warmup)
Chain 1, Iteration: 5000 / 10000 [ 50%]  (Warmup)
Chain 1, Iteration: 5001 / 10000 [ 50%]  (Sampling)
Chain 3, Iteration: 5000 / 10000 [ 50%]  (Warmup)
Chain 3, Iteration: 5001 / 10000 [ 50%]  (Sampling)
Chain 2, Iteration: 5000 / 10000 [ 50%]  (Warmup)
Chain 2, Iteration: 5001 / 10000 [ 50%]  (Sampling)
Chain 3, Iteration: 6000 / 10000 [ 60%]  (Sampling)
Chain 1, Iteration: 6000 / 10000 [ 60%]  (Sampling)
Chain 4, Iteration: 5000 / 10000 [ 50%]  (Warmup)
Chain 4, Iteration: 5001 / 10000 [ 50%]  (Sampling)
Chain 3, Iteration: 7000 / 10000 [ 70%]  (Sampling)
Chain 2, Iteration: 6000 / 10000 [ 60%]  (Sampling)
Chain 1, Iteration: 7000 / 10000 [ 70%]  (Sampling)
Chain 3, Iteration: 8000 / 10000 [ 80%]  (Sampling)
Chain 4, Iteration: 6000 / 10000 [ 60%]  (Sampling)
Chain 1, Iteration: 8000 / 10000 [ 80%]  (Sampling)
Chain 3, Iteration: 9000 / 10000 [ 90%]  (Sampling)
Chain 2, Iteration: 7000 / 10000 [ 70%]  (Sampling)
Chain 1, Iteration: 9000 / 10000 [ 90%]  (Sampling)
Chain 3, Iteration: 10000 / 10000 [100%]  (Sampling)
#  Elapsed Time: 9.1431 seconds (Warm-up)
#                5.46265 seconds (Sampling)
#                14.6058 seconds (Total)


Chain 4, Iteration: 7000 / 10000 [ 70%]  (Sampling)
Chain 1, Iteration: 10000 / 10000 [100%]  (Sampling)
#  Elapsed Time: 10.0662 seconds (Warm-up)
#                6.46506 seconds (Sampling)
#                16.5312 seconds (Total)

The following numerical problems occured the indicated number of times after warmup on chain 1
                                                                                           count
Exception thrown at line 34: normal_log: Location parameter[8] is inf, but must be finite!     1
When a numerical problem occurs, the Metropolis proposal gets rejected.
However, by design Metropolis proposals sometimes get rejected even when there are no numerical problems.
Thus, if the number in the 'count' column is small, do not ask about this message on stan-users.

Chain 2, Iteration: 8000 / 10000 [ 80%]  (Sampling)
Chain 4, Iteration: 8000 / 10000 [ 80%]  (Sampling)
Chain 2, Iteration: 9000 / 10000 [ 90%]  (Sampling)
Chain 4, Iteration: 9000 / 10000 [ 90%]  (Sampling)
Chain 4, Iteration: 10000 / 10000 [100%]  (Sampling)
#  Elapsed Time: 10.6587 seconds (Warm-up)
#                8.5401 seconds (Sampling)
#                19.1988 seconds (Total)

The following numerical problems occured the indicated number of times after warmup on chain 4
                                                                                count
Exception thrown at line 31: normal_log: Scale parameter is 0, but must be > 0!     1
When a numerical problem occurs, the Metropolis proposal gets rejected.
However, by design Metropolis proposals sometimes get rejected even when there are no numerical problems.
Thus, if the number in the 'count' column is small, do not ask about this message on stan-users.

Chain 2, Iteration: 10000 / 10000 [100%]  (Sampling)
#  Elapsed Time: 9.81495 seconds (Warm-up)
#                10.4301 seconds (Sampling)
#                20.2451 seconds (Total)

The following numerical problems occured the indicated number of times after warmup on chain 2
                                                                                           count
Exception thrown at line 34: normal_log: Location parameter[7] is inf, but must be finite!     1
When a numerical problem occurs, the Metropolis proposal gets rejected.
However, by design Metropolis proposals sometimes get rejected even when there are no numerical problems.
Thus, if the number in the 'count' column is small, do not ask about this message on stan-users.
> 
> ## Note: there may be divergent transitions after warmup.
> 
> ## Summarize posteriors
> print(ssm)
Inference for Stan model: ssm.
4 chains, each with iter=10000; warmup=5000; thin=5; 
post-warmup draws per chain=1000, total post-warmup draws=4000.

             mean se_mean    sd   2.5%    25%   50%   75% 97.5% n_eff Rhat
lambda[1]    0.98    0.00  0.13   0.74   0.89  0.98  1.06  1.23  3205    1
lambda[2]    1.18    0.00  0.14   0.94   1.08  1.16  1.26  1.48  2459    1
lambda[3]    1.11    0.00  0.11   0.91   1.04  1.11  1.18  1.34  3860    1
lambda[4]    1.03    0.00  0.11   0.83   0.95  1.02  1.10  1.24  3327    1
lambda[5]    1.20    0.00  0.12   0.99   1.11  1.19  1.28  1.44  2794    1
lambda[6]    1.13    0.00  0.10   0.94   1.07  1.13  1.19  1.33  4000    1
lambda[7]    1.03    0.00  0.09   0.87   0.97  1.03  1.09  1.22  4000    1
lambda[8]    0.97    0.00  0.09   0.81   0.92  0.97  1.03  1.16  3801    1
lambda[9]    0.96    0.00  0.09   0.80   0.90  0.95  1.01  1.14  4000    1
lambda[10]   0.99    0.00  0.09   0.83   0.93  0.99  1.04  1.17  3988    1
lambda[11]   1.10    0.00  0.10   0.91   1.03  1.09  1.16  1.29  3737    1
lambda[12]   1.06    0.00  0.09   0.90   1.00  1.05  1.11  1.24  4000    1
lambda[13]   1.03    0.00  0.09   0.86   0.98  1.03  1.08  1.21  3786    1
lambda[14]   1.02    0.00  0.08   0.86   0.97  1.02  1.07  1.19  4000    1
lambda[15]   1.00    0.00  0.08   0.84   0.94  0.99  1.05  1.17  3598    1
lambda[16]   1.16    0.00  0.10   0.97   1.09  1.16  1.23  1.35  3128    1
lambda[17]   1.09    0.00  0.08   0.93   1.04  1.10  1.15  1.26  3402    1
lambda[18]   0.81    0.00  0.10   0.65   0.73  0.80  0.88  1.03  2124    1
lambda[19]   1.21    0.00  0.14   0.96   1.11  1.21  1.32  1.48  2165    1
lambda[20]   0.93    0.00  0.07   0.79   0.88  0.93  0.98  1.09  3511    1
lambda[21]   0.79    0.00  0.09   0.64   0.72  0.78  0.85  0.98  3029    1
lambda[22]   0.99    0.00  0.10   0.80   0.92  0.99  1.05  1.18  3638    1
lambda[23]   0.92    0.00  0.09   0.75   0.86  0.92  0.98  1.12  3135    1
lambda[24]   1.03    0.00  0.10   0.83   0.96  1.02  1.09  1.23  3727    1
mean_lambda  1.03    0.00  0.03   0.97   1.01  1.03  1.05  1.10  3945    1
sigma2_obs  23.19    0.36 17.95   2.42  10.94 19.11 30.34 67.33  2534    1
sigma2_proc  0.03    0.00  0.02   0.01   0.01  0.02  0.03  0.06  2321    1
N_est[1]    26.83    0.06  3.48  20.47  24.57 26.61 28.90 34.44  3741    1
N_est[2]    26.08    0.06  3.38  20.44  23.75 25.76 28.10 33.51  2936    1
N_est[3]    30.34    0.05  2.97  24.77  28.38 30.26 32.13 36.62  4000    1
N_est[4]    33.59    0.05  3.00  27.74  31.58 33.60 35.53 39.68  3789    1
N_est[5]    34.28    0.05  3.06  28.93  32.12 34.07 36.28 40.62  3238    1
N_est[6]    40.85    0.05  3.18  34.34  38.82 40.92 42.86 47.13  3725    1
N_est[7]    45.98    0.06  3.71  38.26  43.58 46.13 48.57 52.82  3448    1
N_est[8]    47.35    0.06  3.82  39.55  44.93 47.55 49.90 54.44  3726    1
N_est[9]    45.86    0.05  3.35  39.15  43.67 45.92 48.03 52.69  3864    1
N_est[10]   43.80    0.05  3.31  37.46  41.72 43.63 45.85 50.52  4000    1
N_est[11]   43.16    0.05  3.35  37.07  40.87 42.91 45.24 50.49  3706    1
N_est[12]   47.10    0.05  3.38  40.54  44.85 47.16 49.25 53.98  4000    1
N_est[13]   49.73    0.06  3.51  42.53  47.51 49.79 51.91 56.76  3905    1
N_est[14]   51.02    0.05  3.44  44.07  48.81 51.08 53.11 57.93  4000    1
N_est[15]   51.89    0.06  3.47  45.17  49.68 51.85 53.93 59.30  3835    1
N_est[16]   51.46    0.06  3.57  44.99  49.01 51.17 53.65 59.22  3466    1
N_est[17]   59.48    0.06  3.72  51.68  57.26 59.63 61.84 66.52  3523    1
N_est[18]   64.94    0.09  4.87  54.29  61.96 65.57 68.36 73.32  2993    1
N_est[19]   52.39    0.09  4.26  45.10  49.27 52.16 55.25 61.32  2486    1
N_est[20]   63.19    0.08  4.51  53.23  60.41 63.67 66.42 70.89  2895    1
N_est[21]   58.68    0.07  4.19  49.66  56.13 59.01 61.51 66.32  3564    1
N_est[22]   45.98    0.07  3.93  39.11  43.31 45.55 48.45 54.37  3446    1
N_est[23]   45.14    0.06  3.56  37.96  42.90 45.12 47.33 52.53  4000    1
N_est[24]   41.49    0.07  3.75  34.68  39.00 41.19 43.67 49.58  2852    1
N_est[25]   42.34    0.07  3.99  34.76  39.99 42.16 44.66 51.08  2944    1
lp__        -9.72    0.20  7.29 -23.34 -13.99 -9.85 -5.81  6.12  1393    1

Samples were drawn using NUTS(diag_e) at Wed Dec 16 21:21:07 2015.
For each parameter, n_eff is a crude measure of effective sample size,
and Rhat is the potential scale reduction factor on split chains (at 
convergence, Rhat=1).
> 
> proc.time()
   user  system elapsed 
  1.571   0.189  24.252 
