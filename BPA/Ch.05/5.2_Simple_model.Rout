
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R は、自由なソフトウェアであり、「完全に無保証」です。 
一定の条件に従えば、自由にこれを再配布することができます。 
配布条件の詳細に関しては、'license()' あるいは 'licence()' と入力してください。 

R は多くの貢献者による共同プロジェクトです。 
詳しくは 'contributors()' と入力してください。 
また、R や R のパッケージを出版物で引用する際の形式については 
'citation()' と入力してください。 

'demo()' と入力すればデモをみることができます。 
'help()' とすればオンラインヘルプが出ます。 
'help.start()' で HTML ブラウザによるヘルプがみられます。 
'q()' と入力すれば R を終了します。 

> ## 5. State-space models
> ## 5.2. A simple model
> 
> library(rstan)
 要求されたパッケージ ggplot2 をロード中です 
rstan (Version 2.8.2, packaged: 2015-11-26 15:27:02 UTC, GitRev: 05c3d0058b6a)
For execution on a local, multicore CPU with excess RAM we recommend calling
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
> rstan_options(auto_write = TRUE)
> options(mc.cores = parallel::detectCores())
> set.seed(123)
> 
> ## Read data
> ## The data generation code is in bpa-code.txt, available at
> ## http://www.vogelwarte.ch/de/projekte/publikationen/bpa/complete-code-and-data-files-of-the-book.html
> stan_data <- read_rdump("ssm.data.R")
> 
> ## Parameters monitored
> params <- c("lambda", "mean_lambda", "sigma2_obs", "sigma2_proc",
+             "N_est")
> 
> ## MCMC settings
> ni <- 10000
> nt <- 5
> nb <- 5000
> nc <- 4
> 
> ## Initial values
> inits <- lapply(1:nc, function(i) {
+     list(sigma_proc = runif(1, 0, 5),
+          mean_lambda = runif(1, 0.1, 2),
+          sigma_obs = runif(1, 0, 10),
+          N_est1 = runif(1, 20, 40))})
> 
> ## Call Stan from R
> ssm <- stan("ssm.stan",
+             data = stan_data, init = inits, pars = params,
+             chains = nc, iter = ni, warmup = nb, thin = nt,
+             seed = 1,
+             control = list(adapt_delta = 0.999),
+             open_progress = FALSE)
starting worker pid=8390 on localhost:11947 at 20:59:57.215
starting worker pid=8398 on localhost:11947 at 20:59:57.388
starting worker pid=8406 on localhost:11947 at 20:59:57.545
starting worker pid=8414 on localhost:11947 at 20:59:57.704

SAMPLING FOR MODEL 'ssm' NOW (CHAIN 1).

Chain 1, Iteration:    1 / 10000 [  0%]  (Warmup)
SAMPLING FOR MODEL 'ssm' NOW (CHAIN 2).

Chain 2, Iteration:    1 / 10000 [  0%]  (Warmup)
SAMPLING FOR MODEL 'ssm' NOW (CHAIN 3).

Chain 3, Iteration:    1 / 10000 [  0%]  (Warmup)
Chain 1, Iteration: 1000 / 10000 [ 10%]  (Warmup)
SAMPLING FOR MODEL 'ssm' NOW (CHAIN 4).

Chain 4, Iteration:    1 / 10000 [  0%]  (Warmup)
Chain 2, Iteration: 1000 / 10000 [ 10%]  (Warmup)
Chain 1, Iteration: 2000 / 10000 [ 20%]  (Warmup)
Chain 4, Iteration: 1000 / 10000 [ 10%]  (Warmup)
Chain 3, Iteration: 1000 / 10000 [ 10%]  (Warmup)
Chain 2, Iteration: 2000 / 10000 [ 20%]  (Warmup)
Chain 4, Iteration: 2000 / 10000 [ 20%]  (Warmup)
Chain 2, Iteration: 3000 / 10000 [ 30%]  (Warmup)
Chain 1, Iteration: 3000 / 10000 [ 30%]  (Warmup)
Chain 3, Iteration: 2000 / 10000 [ 20%]  (Warmup)
Chain 4, Iteration: 3000 / 10000 [ 30%]  (Warmup)
Chain 2, Iteration: 4000 / 10000 [ 40%]  (Warmup)
Chain 3, Iteration: 3000 / 10000 [ 30%]  (Warmup)
Chain 1, Iteration: 4000 / 10000 [ 40%]  (Warmup)
Chain 2, Iteration: 5000 / 10000 [ 50%]  (Warmup)
Chain 2, Iteration: 5001 / 10000 [ 50%]  (Sampling)
Chain 4, Iteration: 4000 / 10000 [ 40%]  (Warmup)
Chain 3, Iteration: 4000 / 10000 [ 40%]  (Warmup)
Chain 1, Iteration: 5000 / 10000 [ 50%]  (Warmup)
Chain 1, Iteration: 5001 / 10000 [ 50%]  (Sampling)
Chain 2, Iteration: 6000 / 10000 [ 60%]  (Sampling)
Chain 1, Iteration: 6000 / 10000 [ 60%]  (Sampling)
Chain 4, Iteration: 5000 / 10000 [ 50%]  (Warmup)
Chain 4, Iteration: 5001 / 10000 [ 50%]  (Sampling)
Chain 3, Iteration: 5000 / 10000 [ 50%]  (Warmup)
Chain 3, Iteration: 5001 / 10000 [ 50%]  (Sampling)
Chain 2, Iteration: 7000 / 10000 [ 70%]  (Sampling)
Chain 4, Iteration: 6000 / 10000 [ 60%]  (Sampling)
Chain 1, Iteration: 7000 / 10000 [ 70%]  (Sampling)
Chain 4, Iteration: 7000 / 10000 [ 70%]  (Sampling)
Chain 3, Iteration: 6000 / 10000 [ 60%]  (Sampling)
Chain 2, Iteration: 8000 / 10000 [ 80%]  (Sampling)
Chain 4, Iteration: 8000 / 10000 [ 80%]  (Sampling)
Chain 1, Iteration: 8000 / 10000 [ 80%]  (Sampling)
Chain 4, Iteration: 9000 / 10000 [ 90%]  (Sampling)
Chain 3, Iteration: 7000 / 10000 [ 70%]  (Sampling)
Chain 2, Iteration: 9000 / 10000 [ 90%]  (Sampling)
Chain 1, Iteration: 9000 / 10000 [ 90%]  (Sampling)
Chain 4, Iteration: 10000 / 10000 [100%]  (Sampling)
#  Elapsed Time: 10.9578 seconds (Warm-up)
#                6.39709 seconds (Sampling)
#                17.3549 seconds (Total)


Chain 3, Iteration: 8000 / 10000 [ 80%]  (Sampling)
Chain 2, Iteration: 10000 / 10000 [100%]  (Sampling)
#  Elapsed Time: 8.77513 seconds (Warm-up)
#                11.2227 seconds (Sampling)
#                19.9978 seconds (Total)

The following numerical problems occured the indicated number of times after warmup on chain 2
                                                                                           count
Exception thrown at line 34: normal_log: Location parameter[4] is inf, but must be finite!     1
When a numerical problem occurs, the Metropolis proposal gets rejected.
However, by design Metropolis proposals sometimes get rejected even when there are no numerical problems.
Thus, if the number in the 'count' column is small, do not ask about this message on stan-users.

Chain 1, Iteration: 10000 / 10000 [100%]  (Sampling)
#  Elapsed Time: 10.148 seconds (Warm-up)
#                10.6544 seconds (Sampling)
#                20.8024 seconds (Total)

The following numerical problems occured the indicated number of times after warmup on chain 1
                                                                                           count
Exception thrown at line 34: normal_log: Location parameter[7] is inf, but must be finite!     1
When a numerical problem occurs, the Metropolis proposal gets rejected.
However, by design Metropolis proposals sometimes get rejected even when there are no numerical problems.
Thus, if the number in the 'count' column is small, do not ask about this message on stan-users.

Chain 3, Iteration: 9000 / 10000 [ 90%]  (Sampling)
Chain 3, Iteration: 10000 / 10000 [100%]  (Sampling)
#  Elapsed Time: 11.5319 seconds (Warm-up)
#                12.6885 seconds (Sampling)
#                24.2204 seconds (Total)

 警告メッセージ: 
1: There were 1 divergent transitions after warmup. Increasing adapt_delta above 0.999 may help. 
2: Examine the pairs() plot to diagnose sampling problems
 
> 
> ## Note: there may be divergent transitions after warmup.
> 
> ## Summarize posteriors
> print(ssm)
Inference for Stan model: ssm.
4 chains, each with iter=10000; warmup=5000; thin=5; 
post-warmup draws per chain=1000, total post-warmup draws=4000.

             mean se_mean    sd   2.5%    25%    50%   75% 97.5% n_eff Rhat
lambda[1]    0.98    0.00  0.13   0.74   0.89   0.98  1.06  1.23  2782    1
lambda[2]    1.18    0.00  0.14   0.93   1.08   1.16  1.27  1.50  1803    1
lambda[3]    1.11    0.00  0.11   0.90   1.04   1.11  1.18  1.34  4000    1
lambda[4]    1.03    0.00  0.11   0.82   0.95   1.02  1.10  1.25  2800    1
lambda[5]    1.20    0.00  0.12   0.98   1.11   1.19  1.28  1.44  2360    1
lambda[6]    1.13    0.00  0.10   0.95   1.07   1.13  1.19  1.33  3610    1
lambda[7]    1.03    0.00  0.09   0.87   0.98   1.03  1.09  1.22  3996    1
lambda[8]    0.97    0.00  0.09   0.80   0.92   0.97  1.03  1.15  3559    1
lambda[9]    0.96    0.00  0.09   0.79   0.90   0.95  1.02  1.15  3155    1
lambda[10]   0.99    0.00  0.09   0.82   0.93   0.99  1.05  1.18  3867    1
lambda[11]   1.10    0.00  0.10   0.91   1.03   1.09  1.16  1.29  3679    1
lambda[12]   1.05    0.00  0.09   0.88   1.00   1.05  1.11  1.24  4000    1
lambda[13]   1.03    0.00  0.08   0.87   0.97   1.03  1.08  1.20  3881    1
lambda[14]   1.02    0.00  0.08   0.86   0.97   1.02  1.07  1.20  4000    1
lambda[15]   1.00    0.00  0.09   0.84   0.94   0.99  1.05  1.18  3272    1
lambda[16]   1.16    0.00  0.10   0.97   1.09   1.16  1.23  1.36  3154    1
lambda[17]   1.10    0.00  0.08   0.94   1.04   1.10  1.15  1.27  3850    1
lambda[18]   0.81    0.00  0.10   0.65   0.73   0.80  0.88  1.03  2195    1
lambda[19]   1.22    0.00  0.14   0.96   1.12   1.22  1.32  1.48  1680    1
lambda[20]   0.93    0.00  0.08   0.79   0.88   0.92  0.98  1.09  3939    1
lambda[21]   0.79    0.00  0.09   0.63   0.72   0.77  0.84  0.98  2755    1
lambda[22]   0.99    0.00  0.09   0.81   0.93   0.99  1.05  1.18  3090    1
lambda[23]   0.92    0.00  0.09   0.75   0.86   0.92  0.98  1.11  3237    1
lambda[24]   1.02    0.00  0.10   0.82   0.96   1.02  1.09  1.22  3655    1
mean_lambda  1.03    0.00  0.03   0.96   1.01   1.03  1.05  1.10  3443    1
sigma2_obs  22.74    0.44 17.09   1.78  10.86  18.65 30.12 68.75  1521    1
sigma2_proc  0.03    0.00  0.01   0.01   0.02   0.02  0.03  0.06  2061    1
N_est[1]    26.78    0.06  3.49  20.41  24.51  26.60 28.84 34.25  3629    1
N_est[2]    26.02    0.07  3.36  20.44  23.56  25.75 28.11 33.57  2205    1
N_est[3]    30.34    0.05  2.95  24.55  28.43  30.30 32.14 36.58  3825    1
N_est[4]    33.50    0.05  3.03  27.57  31.49  33.54 35.43 39.76  3861    1
N_est[5]    34.18    0.06  3.09  28.90  31.94  34.00 36.12 40.62  2892    1
N_est[6]    40.78    0.06  3.28  34.32  38.67  40.89 42.77 47.33  3412    1
N_est[7]    46.03    0.07  3.74  38.13  43.63  46.33 48.58 53.00  3181    1
N_est[8]    47.43    0.07  3.69  39.74  45.06  47.61 49.86 54.40  3086    1
N_est[9]    45.96    0.06  3.51  38.89  43.71  46.04 48.17 52.89  3969    1
N_est[10]   43.83    0.06  3.38  37.29  41.71  43.71 45.95 50.70  3562    1
N_est[11]   43.29    0.06  3.41  37.10  41.04  42.98 45.30 50.72  3158    1
N_est[12]   47.27    0.05  3.31  40.75  45.15  47.29 49.36 54.05  4000    1
N_est[13]   49.69    0.05  3.47  42.78  47.48  49.79 51.83 56.59  4000    1
N_est[14]   50.93    0.05  3.44  44.27  48.68  50.98 53.15 57.84  4000    1
N_est[15]   51.76    0.06  3.45  45.10  49.54  51.84 53.84 58.70  3881    1
N_est[16]   51.37    0.06  3.59  44.97  48.90  51.06 53.57 59.08  3423    1
N_est[17]   59.46    0.06  3.70  51.69  57.16  59.74 61.80 66.49  3776    1
N_est[18]   65.09    0.09  4.77  54.67  62.11  65.65 68.52 73.11  2869    1
N_est[19]   52.22    0.09  4.32  44.87  49.07  51.91 54.99 61.17  2419    1
N_est[20]   63.25    0.10  4.58  53.24  60.38  63.71 66.61 70.97  2304    1
N_est[21]   58.67    0.07  4.25  49.52  56.02  59.04 61.43 66.37  3779    1
N_est[22]   45.81    0.07  3.85  38.95  43.19  45.46 48.17 54.01  3070    1
N_est[23]   45.08    0.06  3.51  38.35  42.90  44.99 47.21 52.46  3629    1
N_est[24]   41.47    0.06  3.72  34.77  39.05  41.18 43.66 49.72  3345    1
N_est[25]   42.24    0.06  3.95  34.69  39.81  42.04 44.55 50.93  3924    1
lp__        -9.76    0.28  8.06 -24.16 -14.36 -10.10 -5.98  8.95   820    1

Samples were drawn using NUTS(diag_e) at Wed Jan  6 21:00:33 2016.
For each parameter, n_eff is a crude measure of effective sample size,
and Rhat is the potential scale reduction factor on split chains (at 
convergence, Rhat=1).
> 
> proc.time()
   ユーザ   システム       経過  
    18.883      0.668     55.849 
