
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R は、自由なソフトウェアであり、「完全に無保証」です。 
一定の条件に従えば、自由にこれを再配布することができます。 
配布条件の詳細に関しては、'license()' あるいは 'licence()' と入力してください。 

R は多くの貢献者による共同プロジェクトです。 
詳しくは 'contributors()' と入力してください。 
また、R や R のパッケージを出版物で引用する際の形式については 
'citation()' と入力してください。 

'demo()' と入力すればデモをみることができます。 
'help()' とすればオンラインヘルプが出ます。 
'help.start()' で HTML ブラウザによるヘルプがみられます。 
'q()' と入力すれば R を終了します。 

 [以前にセーブされたワークスペースを復帰します] 

> ## 5. State-space models
> ## 5.4. Real example: House martin population counts in the village of
> ## Magden
> 
> library(rstan)
 要求されたパッケージ ggplot2 をロード中です 
rstan (Version 2.8.2, packaged: 2015-11-26 15:27:02 UTC, GitRev: 05c3d0058b6a)
For execution on a local, multicore CPU with excess RAM we recommend calling
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
> rstan_options(auto_write = TRUE)
> options(mc.cores = parallel::detectCores())
> set.seed(123)
> 
> ## Data generation code is transplanted from original bpa-code.txt
> ## House martin population data from Magden
> pyears <- 6 # Number of future years with predictions
> hm <- c(271, 261, 309, 318, 231, 216, 208, 226, 195, 226, 233,
+         209, 226, 192, 191, 225, 245, 205, 191, 174)
> year <- 1990:2009
> 
> ## Bundle data
> stan_data <- list(y = log(hm), T = length(year), pyears = pyears)
> 
> ## Parameters monitored
> params <- c("r", "mean_r", "sigma2_obs", "sigma2_proc",
+             "N_est")
> 
> ## MCMC settings
> ni <- 30000
> nt <- 10
> nb <- 20000
> nc <- 4
> 
> ## Initial values
> inits <- lapply(1:nc, function(i) {
+     list(sigma_proc = runif(1, 0, 1),
+          mean_r = rnorm(1),
+          sigma_obs = runif(1, 0, 1))})
> 
> ## Call Stan from R
> hm_ssm <- stan("ssm2.stan",
+                data = stan_data, init = inits, pars = params,
+                chains = nc, thin = nt, iter = ni, warmup = nb,
+                seed = 1,
+                control = list(adapt_delta = 0.999),
+                open_progress = FALSE)
starting worker pid=8509 on localhost:11361 at 21:00:54.017
starting worker pid=8517 on localhost:11361 at 21:00:54.180
starting worker pid=8525 on localhost:11361 at 21:00:54.338
starting worker pid=8533 on localhost:11361 at 21:00:54.499

SAMPLING FOR MODEL 'ssm2' NOW (CHAIN 1).

Chain 1, Iteration:     1 / 30000 [  0%]  (Warmup)
SAMPLING FOR MODEL 'ssm2' NOW (CHAIN 2).

Chain 2, Iteration:     1 / 30000 [  0%]  (Warmup)
SAMPLING FOR MODEL 'ssm2' NOW (CHAIN 3).

Chain 3, Iteration:     1 / 30000 [  0%]  (Warmup)
SAMPLING FOR MODEL 'ssm2' NOW (CHAIN 4).

Chain 4, Iteration:     1 / 30000 [  0%]  (Warmup)
Chain 1, Iteration:  3000 / 30000 [ 10%]  (Warmup)
Chain 3, Iteration:  3000 / 30000 [ 10%]  (Warmup)
Chain 4, Iteration:  3000 / 30000 [ 10%]  (Warmup)
Chain 1, Iteration:  6000 / 30000 [ 20%]  (Warmup)
Chain 3, Iteration:  6000 / 30000 [ 20%]  (Warmup)
Chain 4, Iteration:  6000 / 30000 [ 20%]  (Warmup)
Chain 2, Iteration:  3000 / 30000 [ 10%]  (Warmup)
Chain 1, Iteration:  9000 / 30000 [ 30%]  (Warmup)
Chain 4, Iteration:  9000 / 30000 [ 30%]  (Warmup)
Chain 3, Iteration:  9000 / 30000 [ 30%]  (Warmup)
Chain 2, Iteration:  6000 / 30000 [ 20%]  (Warmup)
Chain 4, Iteration: 12000 / 30000 [ 40%]  (Warmup)
Chain 1, Iteration: 12000 / 30000 [ 40%]  (Warmup)
Chain 2, Iteration:  9000 / 30000 [ 30%]  (Warmup)
Chain 3, Iteration: 12000 / 30000 [ 40%]  (Warmup)
Chain 2, Iteration: 12000 / 30000 [ 40%]  (Warmup)
Chain 4, Iteration: 15000 / 30000 [ 50%]  (Warmup)
Chain 1, Iteration: 15000 / 30000 [ 50%]  (Warmup)
Chain 3, Iteration: 15000 / 30000 [ 50%]  (Warmup)
Chain 2, Iteration: 15000 / 30000 [ 50%]  (Warmup)
Chain 4, Iteration: 18000 / 30000 [ 60%]  (Warmup)
Chain 2, Iteration: 18000 / 30000 [ 60%]  (Warmup)
Chain 3, Iteration: 18000 / 30000 [ 60%]  (Warmup)
Chain 1, Iteration: 18000 / 30000 [ 60%]  (Warmup)
Chain 4, Iteration: 20001 / 30000 [ 66%]  (Sampling)
Chain 3, Iteration: 20001 / 30000 [ 66%]  (Sampling)
Chain 3, Iteration: 23000 / 30000 [ 76%]  (Sampling)
Chain 4, Iteration: 23000 / 30000 [ 76%]  (Sampling)
Chain 2, Iteration: 20001 / 30000 [ 66%]  (Sampling)
Chain 3, Iteration: 26000 / 30000 [ 86%]  (Sampling)
Chain 1, Iteration: 20001 / 30000 [ 66%]  (Sampling)
Chain 3, Iteration: 29000 / 30000 [ 96%]  (Sampling)
Chain 2, Iteration: 23000 / 30000 [ 76%]  (Sampling)
Chain 3, Iteration: 30000 / 30000 [100%]  (Sampling)
#  Elapsed Time: 63.356 seconds (Warm-up)
#                7.00667 seconds (Sampling)
#                70.3626 seconds (Total)


Chain 1, Iteration: 23000 / 30000 [ 76%]  (Sampling)
Chain 2, Iteration: 26000 / 30000 [ 86%]  (Sampling)
Chain 4, Iteration: 26000 / 30000 [ 86%]  (Sampling)
Chain 1, Iteration: 26000 / 30000 [ 86%]  (Sampling)
Chain 1, Iteration: 29000 / 30000 [ 96%]  (Sampling)
Chain 2, Iteration: 29000 / 30000 [ 96%]  (Sampling)
Chain 2, Iteration: 30000 / 30000 [100%]  (Sampling)
#  Elapsed Time: 67.9943 seconds (Warm-up)
#                9.55777 seconds (Sampling)
#                77.5521 seconds (Total)


Chain 1, Iteration: 30000 / 30000 [100%]  (Sampling)
#  Elapsed Time: 69.4752 seconds (Warm-up)
#                8.65895 seconds (Sampling)
#                78.1342 seconds (Total)


Chain 4, Iteration: 29000 / 30000 [ 96%]  (Sampling)
Chain 4, Iteration: 30000 / 30000 [100%]  (Sampling)
#  Elapsed Time: 58.0645 seconds (Warm-up)
#                24.3768 seconds (Sampling)
#                82.4413 seconds (Total)

 警告メッセージ: 
1: There were 21 divergent transitions after warmup. Increasing adapt_delta above 0.999 may help. 
2: There were 1 transitions after warmup that exceeded the maximum treedepth. Increase max_treedepth above 10. 
3: Examine the pairs() plot to diagnose sampling problems
 
> 
> ## Note: there may be divergent transitions after warmup.
> 
> ## Summarize posteriors
> print(hm_ssm, digits = 3)
Inference for Stan model: ssm2.
4 chains, each with iter=30000; warmup=20000; thin=10; 
post-warmup draws per chain=1000, total post-warmup draws=4000.

               mean se_mean     sd    2.5%     25%     50%     75%   97.5%
r[1]         -0.016   0.001  0.055  -0.123  -0.047  -0.020   0.014   0.105
r[2]          0.083   0.002  0.083  -0.067   0.013   0.091   0.152   0.219
r[3]         -0.005   0.001  0.057  -0.125  -0.039  -0.003   0.033   0.104
r[4]         -0.191   0.004  0.107  -0.352  -0.289  -0.200  -0.102  -0.008
r[5]         -0.072   0.001  0.055  -0.189  -0.103  -0.069  -0.036   0.031
r[6]         -0.037   0.001  0.054  -0.147  -0.066  -0.034  -0.009   0.070
r[7]          0.029   0.001  0.063  -0.098  -0.018   0.032   0.075   0.142
r[8]         -0.071   0.002  0.069  -0.195  -0.128  -0.071  -0.018   0.061
r[9]          0.072   0.002  0.075  -0.061   0.010   0.076   0.133   0.199
r[10]         0.017   0.001  0.055  -0.097  -0.016   0.019   0.048   0.131
r[11]        -0.057   0.001  0.061  -0.172  -0.102  -0.060  -0.015   0.064
r[12]         0.023   0.001  0.062  -0.106  -0.019   0.024   0.070   0.132
r[13]        -0.088   0.002  0.072  -0.213  -0.149  -0.092  -0.030   0.050
r[14]        -0.004   0.001  0.052  -0.112  -0.033  -0.005   0.024   0.105
r[15]         0.091   0.002  0.078  -0.048   0.028   0.101   0.155   0.225
r[16]         0.042   0.001  0.061  -0.078  -0.003   0.046   0.084   0.156
r[17]        -0.104   0.002  0.073  -0.226  -0.164  -0.109  -0.044   0.030
r[18]        -0.067   0.001  0.056  -0.181  -0.100  -0.067  -0.031   0.039
r[19]        -0.067   0.001  0.061  -0.188  -0.105  -0.070  -0.025   0.056
mean_r       -0.022   0.000  0.025  -0.078  -0.036  -0.021  -0.008   0.029
sigma2_obs    0.006   0.000  0.006   0.000   0.001   0.004   0.009   0.021
sigma2_proc   0.012   0.000  0.009   0.000   0.005   0.011   0.017   0.033
N_est[1]    273.948   0.272 15.916 244.161 265.092 272.247 281.891 310.804
N_est[2]    269.572   0.262 14.432 245.028 260.247 267.277 277.839 302.240
N_est[3]    293.246   0.660 20.275 250.552 279.064 297.016 308.270 326.525
N_est[4]    292.188   0.779 24.139 244.916 273.299 295.511 313.265 328.768
N_est[5]    240.766   0.264 12.889 220.293 231.414 238.609 248.936 269.472
N_est[6]    224.214   0.359 13.297 202.089 215.196 221.489 232.514 253.320
N_est[7]    216.115   0.396 13.320 194.493 207.156 213.213 223.894 245.923
N_est[8]    222.267   0.205 10.938 199.228 215.704 223.065 228.503 244.471
N_est[9]    207.240   0.447 13.849 186.887 196.461 204.226 216.383 236.849
N_est[10]   222.400   0.167 10.485 200.411 216.339 223.415 228.333 242.569
N_est[11]   226.290   0.211 11.364 202.143 218.882 227.517 233.707 247.503
N_est[12]   213.715   0.181 10.413 195.044 207.384 212.473 219.592 236.627
N_est[13]   218.643   0.203 10.948 195.685 211.700 219.725 226.026 239.479
N_est[14]   200.191   0.282 11.146 182.132 192.079 198.185 207.555 225.221
N_est[15]   199.367   0.231 11.159 180.898 191.218 197.665 206.617 223.662
N_est[16]   218.458   0.292 12.114 193.798 210.199 220.022 226.338 240.721
N_est[17]   228.126   0.535 17.295 192.252 215.154 231.080 242.317 254.208
N_est[18]   205.209   0.197 10.320 184.180 199.179 205.167 210.579 228.156
N_est[19]   191.850   0.149  9.396 173.524 186.358 191.433 196.935 211.939
N_est[20]   179.640   0.255 11.572 160.140 172.476 177.431 185.761 207.141
N_est[21]   177.048   0.385 22.710 133.761 162.374 176.796 190.762 224.640
N_est[22]   174.654   0.487 30.120 118.054 156.121 174.025 191.906 236.794
N_est[23]   172.102   0.590 36.076 107.174 149.795 170.264 191.373 250.017
N_est[24]   169.372   0.690 42.448  94.895 142.670 166.849 190.342 268.197
N_est[25]   167.291   0.751 47.389  86.517 137.669 163.445 189.655 274.739
N_est[26]   164.963   0.827 52.282  82.259 131.311 159.755 188.834 292.024
lp__         80.941   0.613 12.634  63.713  73.054  78.115  85.490 112.998
            n_eff  Rhat
r[1]         3909 1.000
r[2]         1150 1.003
r[3]         3303 1.000
r[4]          908 1.002
r[5]         3110 1.002
r[6]         3410 1.000
r[7]         2217 1.001
r[8]         1824 1.002
r[9]         1181 1.002
r[10]        3366 1.002
r[11]        2302 1.000
r[12]        2414 1.000
r[13]        1418 1.001
r[14]        4000 1.000
r[15]        1153 1.002
r[16]        1757 1.002
r[17]        1393 1.001
r[18]        2857 1.001
r[19]        2879 1.000
mean_r       3843 0.999
sigma2_obs   1013 1.003
sigma2_proc  1202 1.003
N_est[1]     3417 1.000
N_est[2]     3042 1.000
N_est[3]      943 1.004
N_est[4]      960 1.003
N_est[5]     2386 0.999
N_est[6]     1370 1.002
N_est[7]     1131 1.002
N_est[8]     2835 1.001
N_est[9]      961 1.003
N_est[10]    3927 1.000
N_est[11]    2911 1.001
N_est[12]    3323 1.000
N_est[13]    2908 1.000
N_est[14]    1559 1.000
N_est[15]    2324 1.001
N_est[16]    1716 1.002
N_est[17]    1046 1.004
N_est[18]    2751 1.001
N_est[19]    3956 1.000
N_est[20]    2065 1.001
N_est[21]    3481 1.000
N_est[22]    3825 1.000
N_est[23]    3733 1.000
N_est[24]    3782 1.000
N_est[25]    3977 1.000
N_est[26]    4000 1.000
lp__          425 1.009

Samples were drawn using NUTS(diag_e) at Wed Jan  6 21:02:23 2016.
For each parameter, n_eff is a crude measure of effective sample size,
and Rhat is the potential scale reduction factor on split chains (at 
convergence, Rhat=1).
> 
> proc.time()
   ユーザ   システム       経過  
    19.526      0.699    109.572 
