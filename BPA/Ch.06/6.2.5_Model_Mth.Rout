
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ## 6. Estimation of the size of a closed population
> ## 6.2. Generation and analysis of simulated data with data
> ## augmentation
> ## 6.2.5. Combined effects: model Mth
> 
> library(rstan)
Loading required package: ggplot2
rstan (Version 2.8.1, packaged: 2015-11-18 17:18:35 UTC, GitRev: 05c3d0058b6a)
For execution on a local, multicore CPU with excess RAM we recommend calling
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
> rstan_options(auto_write = TRUE)
> options(mc.cores = parallel::detectCores())
> set.seed(1234)
> 
> ## Read data
> ## The data generation code is in bpa-code.txt, available at
> ## http://www.vogelwarte.ch/de/projekte/publikationen/bpa/complete-code-and-data-files-of-the-book.html
> stan_data <- read_rdump("Mth.data.R")
> 
> ## Initial values
> inits <- function() list(sigma = runif(1, 0.5, 0.9))
> 
> ## Parameters monitored
> params <- c("N", "mean_p", "mean_lp", "sigma", "omega")
> 
> ## MCMC settings
> ni <- 15000
> nt <- 5
> nb <- 10000
> nc <- 4
> 
> ## Call Stan from R
> out <- stan("Mth.stan",
+             data = stan_data, init = inits, pars = params,
+             chains = nc, iter = ni, warmup = nb, thin = nt,
+             seed = 1,
+             open_progress = FALSE)
starting worker pid=7625 on localhost:11722 at 22:03:24.511
starting worker pid=7633 on localhost:11722 at 22:03:24.637
starting worker pid=7641 on localhost:11722 at 22:03:24.776
starting worker pid=7649 on localhost:11722 at 22:03:24.908

SAMPLING FOR MODEL 'Mth' NOW (CHAIN 1).

Chain 1, Iteration:     1 / 15000 [  0%]  (Warmup)
SAMPLING FOR MODEL 'Mth' NOW (CHAIN 2).

Chain 2, Iteration:     1 / 15000 [  0%]  (Warmup)
SAMPLING FOR MODEL 'Mth' NOW (CHAIN 3).

Chain 3, Iteration:     1 / 15000 [  0%]  (Warmup)
SAMPLING FOR MODEL 'Mth' NOW (CHAIN 4).

Chain 4, Iteration:     1 / 15000 [  0%]  (Warmup)
Chain 2, Iteration:  1500 / 15000 [ 10%]  (Warmup)
Chain 1, Iteration:  1500 / 15000 [ 10%]  (Warmup)
Chain 4, Iteration:  1500 / 15000 [ 10%]  (Warmup)
Chain 3, Iteration:  1500 / 15000 [ 10%]  (Warmup)
Chain 1, Iteration:  3000 / 15000 [ 20%]  (Warmup)
Chain 2, Iteration:  3000 / 15000 [ 20%]  (Warmup)
Chain 4, Iteration:  3000 / 15000 [ 20%]  (Warmup)
Chain 3, Iteration:  3000 / 15000 [ 20%]  (Warmup)
Chain 1, Iteration:  4500 / 15000 [ 30%]  (Warmup)
Chain 2, Iteration:  4500 / 15000 [ 30%]  (Warmup)
Chain 4, Iteration:  4500 / 15000 [ 30%]  (Warmup)
Chain 3, Iteration:  4500 / 15000 [ 30%]  (Warmup)
Chain 1, Iteration:  6000 / 15000 [ 40%]  (Warmup)
Chain 2, Iteration:  6000 / 15000 [ 40%]  (Warmup)
Chain 4, Iteration:  6000 / 15000 [ 40%]  (Warmup)
Chain 3, Iteration:  6000 / 15000 [ 40%]  (Warmup)
Chain 2, Iteration:  7500 / 15000 [ 50%]  (Warmup)
Chain 1, Iteration:  7500 / 15000 [ 50%]  (Warmup)
Chain 4, Iteration:  7500 / 15000 [ 50%]  (Warmup)
Chain 3, Iteration:  7500 / 15000 [ 50%]  (Warmup)
Chain 2, Iteration:  9000 / 15000 [ 60%]  (Warmup)
Chain 4, Iteration:  9000 / 15000 [ 60%]  (Warmup)
Chain 1, Iteration:  9000 / 15000 [ 60%]  (Warmup)
Chain 2, Iteration: 10001 / 15000 [ 66%]  (Sampling)
Chain 3, Iteration:  9000 / 15000 [ 60%]  (Warmup)
Chain 4, Iteration: 10001 / 15000 [ 66%]  (Sampling)
Chain 1, Iteration: 10001 / 15000 [ 66%]  (Sampling)
Chain 3, Iteration: 10001 / 15000 [ 66%]  (Sampling)
Chain 2, Iteration: 11500 / 15000 [ 76%]  (Sampling)
Chain 4, Iteration: 11500 / 15000 [ 76%]  (Sampling)
Chain 1, Iteration: 11500 / 15000 [ 76%]  (Sampling)
Chain 3, Iteration: 11500 / 15000 [ 76%]  (Sampling)
Chain 2, Iteration: 13000 / 15000 [ 86%]  (Sampling)
Chain 4, Iteration: 13000 / 15000 [ 86%]  (Sampling)
Chain 1, Iteration: 13000 / 15000 [ 86%]  (Sampling)
Chain 3, Iteration: 13000 / 15000 [ 86%]  (Sampling)
Chain 2, Iteration: 14500 / 15000 [ 96%]  (Sampling)
Chain 4, Iteration: 14500 / 15000 [ 96%]  (Sampling)
Chain 2, Iteration: 15000 / 15000 [100%]  (Sampling)
#  Elapsed Time: 78.5742 seconds (Warm-up)
#                59.8042 seconds (Sampling)
#                138.378 seconds (Total)

The following numerical problems occured the indicated number of times after warmup on chain 2
                                                                                count
Exception thrown at line 47: normal_log: Scale parameter is 0, but must be > 0!     1
When a numerical problem occurs, the Metropolis proposal gets rejected.
However, by design Metropolis proposals sometimes get rejected even when there are no numerical problems.
Thus, if the number in the 'count' column is small, do not ask about this message on stan-users.

Chain 4, Iteration: 15000 / 15000 [100%]  (Sampling)
#  Elapsed Time: 81.7646 seconds (Warm-up)
#                57.1816 seconds (Sampling)
#                138.946 seconds (Total)


Chain 3, Iteration: 14500 / 15000 [ 96%]  (Sampling)
Chain 1, Iteration: 14500 / 15000 [ 96%]  (Sampling)
Chain 3, Iteration: 15000 / 15000 [100%]  (Sampling)
#  Elapsed Time: 90.4001 seconds (Warm-up)
#                55.1537 seconds (Sampling)
#                145.554 seconds (Total)

The following numerical problems occured the indicated number of times after warmup on chain 3
                                                                                count
Exception thrown at line 47: normal_log: Scale parameter is 0, but must be > 0!     1
When a numerical problem occurs, the Metropolis proposal gets rejected.
However, by design Metropolis proposals sometimes get rejected even when there are no numerical problems.
Thus, if the number in the 'count' column is small, do not ask about this message on stan-users.

Chain 1, Iteration: 15000 / 15000 [100%]  (Sampling)
#  Elapsed Time: 84.5376 seconds (Warm-up)
#                65.5256 seconds (Sampling)
#                150.063 seconds (Total)

The following numerical problems occured the indicated number of times after warmup on chain 1
                                                                                count
Exception thrown at line 47: normal_log: Scale parameter is 0, but must be > 0!     1
When a numerical problem occurs, the Metropolis proposal gets rejected.
However, by design Metropolis proposals sometimes get rejected even when there are no numerical problems.
Thus, if the number in the 'count' column is small, do not ask about this message on stan-users.
Warning messages:
1: There were 17 divergent transitions after warmup. Increasing adapt_delta above 0.8 may help. 
2: Examine the pairs() plot to diagnose sampling problems
 
> ## Note: There may be divergent transitions after warmup.
> 
> ## Summarize posteriors
> print(out, digits = 3)
Inference for Stan model: Mth.
4 chains, each with iter=15000; warmup=10000; thin=5; 
post-warmup draws per chain=1000, total post-warmup draws=4000.

               mean se_mean     sd     2.5%      25%      50%      75%    97.5%
N           106.933   0.545 10.546   93.000   99.000  105.000  112.000  133.025
mean_p[1]     0.388   0.003  0.076    0.234    0.339    0.390    0.442    0.534
mean_p[2]     0.292   0.003  0.068    0.161    0.245    0.291    0.338    0.430
mean_p[3]     0.281   0.003  0.065    0.153    0.237    0.282    0.326    0.411
mean_p[4]     0.444   0.003  0.077    0.282    0.392    0.449    0.498    0.584
mean_p[5]     0.432   0.003  0.079    0.270    0.382    0.435    0.488    0.580
mean_lp[1]   -0.467   0.013  0.334   -1.186   -0.668   -0.446   -0.235    0.138
mean_lp[2]   -0.912   0.013  0.344   -1.654   -1.125   -0.889   -0.673   -0.282
mean_lp[3]   -0.962   0.014  0.339   -1.714   -1.172   -0.935   -0.727   -0.361
mean_lp[4]   -0.231   0.012  0.325   -0.933   -0.437   -0.205   -0.007    0.341
mean_lp[5]   -0.280   0.013  0.333   -0.993   -0.483   -0.260   -0.047    0.323
sigma         1.057   0.019  0.286    0.560    0.856    1.036    1.236    1.658
omega         0.278   0.001  0.036    0.218    0.253    0.275    0.299    0.357
lp__       -679.323   7.115 98.808 -852.098 -748.674 -687.079 -618.183 -462.796
           n_eff  Rhat
N            374 1.012
mean_p[1]    667 1.006
mean_p[2]    678 1.006
mean_p[3]    619 1.009
mean_p[4]    735 1.007
mean_p[5]    674 1.007
mean_lp[1]   656 1.006
mean_lp[2]   662 1.006
mean_lp[3]   598 1.009
mean_lp[4]   724 1.007
mean_lp[5]   662 1.006
sigma        222 1.018
omega        598 1.007
lp__         193 1.022

Samples were drawn using NUTS(diag_e) at Wed Dec 16 22:06:23 2015.
For each parameter, n_eff is a crude measure of effective sample size,
and Rhat is the potential scale reduction factor on split chains (at 
convergence, Rhat=1).
> 
> proc.time()
   user  system elapsed 
 22.056   0.756 202.172 
