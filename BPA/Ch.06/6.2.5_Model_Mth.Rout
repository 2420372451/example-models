
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ## 6. Estimation of the size of a closed population
> ## 6.2. Generation and analysis of simulated data with data
> ## augmentation
> ## 6.2.5. Combined effects: model Mth
> 
> library(rstan)
Loading required package: ggplot2
rstan (Version 2.8.1, packaged: 2015-11-18 17:18:35 UTC, GitRev: 05c3d0058b6a)
For execution on a local, multicore CPU with excess RAM we recommend calling
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
> rstan_options(auto_write = TRUE)
> options(mc.cores = parallel::detectCores())
> set.seed(1234)
> 
> ## Read data
> ## The data generation code is in bpa-code.txt, available at
> ## http://www.vogelwarte.ch/de/projekte/publikationen/bpa/complete-code-and-data-files-of-the-book.html
> stan_data <- read_rdump("Mth.data.R")
> 
> ## Initial values
> inits <- function() list(sigma = runif(1, 0.5, 0.9))
> 
> ## Parameters monitored
> params <- c("N", "mean_p", "mean_lp", "sigma", "omega")
> 
> ## MCMC settings
> ni <- 15000
> nt <- 5
> nb <- 10000
> nc <- 4
> 
> ## Call Stan from R
> out <- stan("Mth.stan",
+             data = stan_data, init = inits, pars = params,
+             chains = nc, iter = ni, warmup = nb, thin = nt,
+             seed = 2,
+             control = list(adapt_delta = 0.95),
+             open_progress = FALSE)
starting worker pid=12407 on localhost:11926 at 20:43:07.435
starting worker pid=12415 on localhost:11926 at 20:43:07.559
starting worker pid=12423 on localhost:11926 at 20:43:07.698
starting worker pid=12431 on localhost:11926 at 20:43:07.837

SAMPLING FOR MODEL 'Mth' NOW (CHAIN 1).

Chain 1, Iteration:     1 / 15000 [  0%]  (Warmup)
SAMPLING FOR MODEL 'Mth' NOW (CHAIN 2).

Chain 2, Iteration:     1 / 15000 [  0%]  (Warmup)
SAMPLING FOR MODEL 'Mth' NOW (CHAIN 3).

Chain 3, Iteration:     1 / 15000 [  0%]  (Warmup)
SAMPLING FOR MODEL 'Mth' NOW (CHAIN 4).

Chain 4, Iteration:     1 / 15000 [  0%]  (Warmup)
Chain 2, Iteration:  1500 / 15000 [ 10%]  (Warmup)
Chain 4, Iteration:  1500 / 15000 [ 10%]  (Warmup)
Chain 3, Iteration:  1500 / 15000 [ 10%]  (Warmup)
Chain 1, Iteration:  1500 / 15000 [ 10%]  (Warmup)
Chain 2, Iteration:  3000 / 15000 [ 20%]  (Warmup)
Chain 4, Iteration:  3000 / 15000 [ 20%]  (Warmup)
Chain 1, Iteration:  3000 / 15000 [ 20%]  (Warmup)
Chain 3, Iteration:  3000 / 15000 [ 20%]  (Warmup)
Chain 2, Iteration:  4500 / 15000 [ 30%]  (Warmup)
Chain 4, Iteration:  4500 / 15000 [ 30%]  (Warmup)
Chain 3, Iteration:  4500 / 15000 [ 30%]  (Warmup)
Chain 1, Iteration:  4500 / 15000 [ 30%]  (Warmup)
Chain 2, Iteration:  6000 / 15000 [ 40%]  (Warmup)
Chain 4, Iteration:  6000 / 15000 [ 40%]  (Warmup)
Chain 3, Iteration:  6000 / 15000 [ 40%]  (Warmup)
Chain 1, Iteration:  6000 / 15000 [ 40%]  (Warmup)
Chain 2, Iteration:  7500 / 15000 [ 50%]  (Warmup)
Chain 4, Iteration:  7500 / 15000 [ 50%]  (Warmup)
Chain 3, Iteration:  7500 / 15000 [ 50%]  (Warmup)
Chain 1, Iteration:  7500 / 15000 [ 50%]  (Warmup)
Chain 2, Iteration:  9000 / 15000 [ 60%]  (Warmup)
Chain 4, Iteration:  9000 / 15000 [ 60%]  (Warmup)
Chain 3, Iteration:  9000 / 15000 [ 60%]  (Warmup)
Chain 1, Iteration:  9000 / 15000 [ 60%]  (Warmup)
Chain 2, Iteration: 10001 / 15000 [ 66%]  (Sampling)
Chain 4, Iteration: 10001 / 15000 [ 66%]  (Sampling)
Chain 3, Iteration: 10001 / 15000 [ 66%]  (Sampling)
Chain 1, Iteration: 10001 / 15000 [ 66%]  (Sampling)
Chain 2, Iteration: 11500 / 15000 [ 76%]  (Sampling)
Chain 4, Iteration: 11500 / 15000 [ 76%]  (Sampling)
Chain 3, Iteration: 11500 / 15000 [ 76%]  (Sampling)
Chain 1, Iteration: 11500 / 15000 [ 76%]  (Sampling)
Chain 4, Iteration: 13000 / 15000 [ 86%]  (Sampling)
Chain 2, Iteration: 13000 / 15000 [ 86%]  (Sampling)
Chain 1, Iteration: 13000 / 15000 [ 86%]  (Sampling)
Chain 3, Iteration: 13000 / 15000 [ 86%]  (Sampling)
Chain 4, Iteration: 14500 / 15000 [ 96%]  (Sampling)
Chain 2, Iteration: 14500 / 15000 [ 96%]  (Sampling)
Chain 4, Iteration: 15000 / 15000 [100%]  (Sampling)
#  Elapsed Time: 152.867 seconds (Warm-up)
#                83.2185 seconds (Sampling)
#                236.085 seconds (Total)

The following numerical problems occured the indicated number of times after warmup on chain 4
                                                                                count
Exception thrown at line 47: normal_log: Scale parameter is 0, but must be > 0!     1
When a numerical problem occurs, the Metropolis proposal gets rejected.
However, by design Metropolis proposals sometimes get rejected even when there are no numerical problems.
Thus, if the number in the 'count' column is small, do not ask about this message on stan-users.

Chain 1, Iteration: 14500 / 15000 [ 96%]  (Sampling)
Chain 3, Iteration: 14500 / 15000 [ 96%]  (Sampling)
Chain 2, Iteration: 15000 / 15000 [100%]  (Sampling)
#  Elapsed Time: 150.555 seconds (Warm-up)
#                94.1961 seconds (Sampling)
#                244.751 seconds (Total)

The following numerical problems occured the indicated number of times after warmup on chain 2
                                                                                count
Exception thrown at line 47: normal_log: Scale parameter is 0, but must be > 0!     1
When a numerical problem occurs, the Metropolis proposal gets rejected.
However, by design Metropolis proposals sometimes get rejected even when there are no numerical problems.
Thus, if the number in the 'count' column is small, do not ask about this message on stan-users.

Chain 1, Iteration: 15000 / 15000 [100%]  (Sampling)
#  Elapsed Time: 162.81 seconds (Warm-up)
#                82.8543 seconds (Sampling)
#                245.664 seconds (Total)

The following numerical problems occured the indicated number of times after warmup on chain 1
                                                                                count
Exception thrown at line 47: normal_log: Scale parameter is 0, but must be > 0!     1
When a numerical problem occurs, the Metropolis proposal gets rejected.
However, by design Metropolis proposals sometimes get rejected even when there are no numerical problems.
Thus, if the number in the 'count' column is small, do not ask about this message on stan-users.

Chain 3, Iteration: 15000 / 15000 [100%]  (Sampling)
#  Elapsed Time: 159.527 seconds (Warm-up)
#                87.0416 seconds (Sampling)
#                246.569 seconds (Total)

Warning messages:
1: There were 34 divergent transitions after warmup. Increasing adapt_delta above 0.95 may help. 
2: Examine the pairs() plot to diagnose sampling problems
 
> ## Note: There may be divergent transitions after warmup.
> 
> ## Summarize posteriors
> print(out, digits = 3)
Inference for Stan model: Mth.
4 chains, each with iter=15000; warmup=10000; thin=5; 
post-warmup draws per chain=1000, total post-warmup draws=4000.

               mean se_mean      sd     2.5%      25%      50%      75%
N           104.425   0.500   9.861   92.000   98.000  102.000  109.000
mean_p[1]     0.401   0.003   0.074    0.251    0.352    0.403    0.453
mean_p[2]     0.305   0.003   0.065    0.174    0.262    0.306    0.350
mean_p[3]     0.294   0.003   0.065    0.168    0.249    0.293    0.338
mean_p[4]     0.457   0.003   0.074    0.297    0.410    0.462    0.508
mean_p[5]     0.445   0.003   0.075    0.284    0.399    0.449    0.496
mean_lp[1]   -0.410   0.012   0.319   -1.092   -0.611   -0.392   -0.188
mean_lp[2]   -0.845   0.013   0.323   -1.558   -1.034   -0.821   -0.620
mean_lp[3]   -0.900   0.013   0.328   -1.603   -1.106   -0.881   -0.674
mean_lp[4]   -0.176   0.012   0.309   -0.861   -0.364   -0.153    0.033
mean_lp[5]   -0.226   0.012   0.313   -0.925   -0.411   -0.206   -0.015
sigma         0.977   0.019   0.281    0.512    0.770    0.954    1.157
omega         0.271   0.001   0.034    0.214    0.247    0.269    0.291
lp__       -649.698   7.515 105.041 -836.731 -723.716 -656.362 -579.645
              97.5% n_eff  Rhat
N           130.000   390 1.006
mean_p[1]     0.542   774 1.002
mean_p[2]     0.429   644 1.003
mean_p[3]     0.420   599 1.005
mean_p[4]     0.592   622 1.006
mean_p[5]     0.586   725 1.003
mean_lp[1]    0.168   758 1.002
mean_lp[2]   -0.287   626 1.003
mean_lp[3]   -0.321   593 1.005
mean_lp[4]    0.372   617 1.005
mean_lp[5]    0.347   720 1.003
sigma         1.602   221 1.012
omega         0.348   675 1.002
lp__       -427.009   195 1.016

Samples were drawn using NUTS(diag_e) at Thu Dec 17 20:47:24 2015.
For each parameter, n_eff is a crude measure of effective sample size,
and Rhat is the potential scale reduction factor on split chains (at 
convergence, Rhat=1).
> 
> proc.time()
   user  system elapsed 
  1.661   0.188 258.451 
