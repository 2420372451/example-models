
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ## 8. Estimation of survival probabilities using mark-recovery data
> ## 8.3. The mark-recovery model fitted with the multinomial likelihood 
> ## 8.3.1. Constant parameters
> 
> library(rstan)
Loading required package: ggplot2
rstan (Version 2.8.1, packaged: 2015-11-18 17:18:35 UTC, GitRev: 05c3d0058b6a)
For execution on a local, multicore CPU with excess RAM we recommend calling
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
> rstan_options(auto_write = TRUE)
> options(mc.cores = parallel::detectCores())
> set.seed(123)
> 
> ## Read data
> ## The data generation code is in bpa-code.txt, available at
> ## http://www.vogelwarte.ch/de/projekte/publikationen/bpa/complete-code-and-data-files-of-the-book.html
> stan_data <- read_rdump("mr_mnl.data.R")
> 
> ## Initial values
> inits <- function() list(mean_s = runif(1, 0, 1),
+                          mean_r = runif(1, 0, 1))
> 
> ## Parameters monitored
> params <- c("mean_s", "mean_r")
> 
> ## MCMC settings
> ni <- 3000
> nt <- 2
> nb <- 1000
> nc <- 4
> 
> ## Call Stan from R
> mr <- stan("mr_mnl.stan",
+            data = stan_data, init = inits, pars = params,
+            chains = nc, iter = ni, warmup = nb, thin = nt,
+            seed = 1,
+            open_progress = FALSE)
starting worker pid=10369 on localhost:11521 at 05:21:11.156
starting worker pid=10377 on localhost:11521 at 05:21:11.284
starting worker pid=10385 on localhost:11521 at 05:21:11.414
starting worker pid=10393 on localhost:11521 at 05:21:11.545

SAMPLING FOR MODEL 'mr_mnl' NOW (CHAIN 1).

Chain 1, Iteration:    1 / 3000 [  0%]  (Warmup)
Chain 1, Iteration:  300 / 3000 [ 10%]  (Warmup)
Chain 1, Iteration:  600 / 3000 [ 20%]  (Warmup)
Chain 1, Iteration:  900 / 3000 [ 30%]  (Warmup)
Chain 1, Iteration: 1001 / 3000 [ 33%]  (Sampling)
Chain 1, Iteration: 1300 / 3000 [ 43%]  (Sampling)
Chain 1, Iteration: 1600 / 3000 [ 53%]  (Sampling)
Chain 1, Iteration: 1900 / 3000 [ 63%]  (Sampling)
Chain 1, Iteration: 2200 / 3000 [ 73%]  (Sampling)
Chain 1, Iteration: 2500 / 3000 [ 83%]  (Sampling)
SAMPLING FOR MODEL 'mr_mnl' NOW (CHAIN 2).

Chain 2, Iteration:    1 / 3000 [  0%]  (Warmup)
Chain 1, Iteration: 2800 / 3000 [ 93%]  (Sampling)
Chain 2, Iteration:  300 / 3000 [ 10%]  (Warmup)
Chain 1, Iteration: 3000 / 3000 [100%]  (Sampling)
#  Elapsed Time: 0.196408 seconds (Warm-up)
#                0.384402 seconds (Sampling)
#                0.58081 seconds (Total)


Chain 2, Iteration:  600 / 3000 [ 20%]  (Warmup)
Chain 2, Iteration:  900 / 3000 [ 30%]  (Warmup)
Chain 2, Iteration: 1001 / 3000 [ 33%]  (Sampling)
Chain 2, Iteration: 1300 / 3000 [ 43%]  (Sampling)
Chain 2, Iteration: 1600 / 3000 [ 53%]  (Sampling)
Chain 2, Iteration: 1900 / 3000 [ 63%]  (Sampling)
Chain 2, Iteration: 2200 / 3000 [ 73%]  (Sampling)
Chain 2, Iteration: 2500 / 3000 [ 83%]  (Sampling)
Chain 2, Iteration: 2800 / 3000 [ 93%]  (Sampling)
Chain 2, Iteration: 3000 / 3000 [100%]  (Sampling)
#  Elapsed Time: 0.186152 seconds (Warm-up)
#                0.327125 seconds (Sampling)
#                0.513277 seconds (Total)


SAMPLING FOR MODEL 'mr_mnl' NOW (CHAIN 3).

Chain 3, Iteration:    1 / 3000 [  0%]  (Warmup)
Chain 3, Iteration:  300 / 3000 [ 10%]  (Warmup)
Chain 3, Iteration:  600 / 3000 [ 20%]  (Warmup)
Chain 3, Iteration:  900 / 3000 [ 30%]  (Warmup)
Chain 3, Iteration: 1001 / 3000 [ 33%]  (Sampling)
Chain 3, Iteration: 1300 / 3000 [ 43%]  (Sampling)
Chain 3, Iteration: 1600 / 3000 [ 53%]  (Sampling)
Chain 3, Iteration: 1900 / 3000 [ 63%]  (Sampling)
Chain 3, Iteration: 2200 / 3000 [ 73%]  (Sampling)
Chain 3, Iteration: 2500 / 3000 [ 83%]  (Sampling)
SAMPLING FOR MODEL 'mr_mnl' NOW (CHAIN 4).

Chain 4, Iteration:    1 / 3000 [  0%]  (Warmup)
Chain 3, Iteration: 2800 / 3000 [ 93%]  (Sampling)
Chain 3, Iteration: 3000 / 3000 [100%]  (Sampling)
#  Elapsed Time: 0.192767 seconds (Warm-up)
#                0.357618 seconds (Sampling)
#                0.550385 seconds (Total)


Chain 4, Iteration:  300 / 3000 [ 10%]  (Warmup)
Chain 4, Iteration:  600 / 3000 [ 20%]  (Warmup)
Chain 4, Iteration:  900 / 3000 [ 30%]  (Warmup)
Chain 4, Iteration: 1001 / 3000 [ 33%]  (Sampling)
Chain 4, Iteration: 1300 / 3000 [ 43%]  (Sampling)
Chain 4, Iteration: 1600 / 3000 [ 53%]  (Sampling)
Chain 4, Iteration: 1900 / 3000 [ 63%]  (Sampling)
Chain 4, Iteration: 2200 / 3000 [ 73%]  (Sampling)
Chain 4, Iteration: 2500 / 3000 [ 83%]  (Sampling)
Chain 4, Iteration: 2800 / 3000 [ 93%]  (Sampling)
Chain 4, Iteration: 3000 / 3000 [100%]  (Sampling)
#  Elapsed Time: 0.187322 seconds (Warm-up)
#                0.350691 seconds (Sampling)
#                0.538013 seconds (Total)

> 
> ## Summarize posteriors
> print(mr, digits = 3)
Inference for Stan model: mr_mnl.
4 chains, each with iter=3000; warmup=1000; thin=2; 
post-warmup draws per chain=1000, total post-warmup draws=4000.

           mean se_mean    sd     2.5%      25%      50%      75%    97.5%
mean_s    0.832   0.001 0.034    0.768    0.810    0.832    0.855    0.900
mean_r    0.187   0.001 0.030    0.141    0.167    0.183    0.202    0.252
lp__   -421.749   0.025 1.048 -424.686 -422.136 -421.443 -421.008 -420.765
       n_eff  Rhat
mean_s  1699 1.003
mean_r  1306 1.006
lp__    1734 1.003

Samples were drawn using NUTS(diag_e) at Thu Dec 17 05:21:14 2015.
For each parameter, n_eff is a crude measure of effective sample size,
and Rhat is the potential scale reduction factor on split chains (at 
convergence, Rhat=1).
> 
> 
> proc.time()
   user  system elapsed 
  1.522   0.200   5.311 
