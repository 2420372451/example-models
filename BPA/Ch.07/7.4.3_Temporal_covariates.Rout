
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ## 7. Estimation of survival probabilities using capture-recapture data
> ## 7.4. Models with time-variation
> ## 7.4.3. Temporal covariates
> 
> library(rstan)
Loading required package: ggplot2
rstan (Version 2.8.1, packaged: 2015-11-18 17:18:35 UTC, GitRev: 05c3d0058b6a)
For execution on a local, multicore CPU with excess RAM we recommend calling
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
> rstan_options(auto_write = TRUE)
> options(mc.cores = parallel::detectCores())
> set.seed(123)
> 
> ## Read data
> ## The data generation code is in bpa-code.txt, available at
> ## http://www.vogelwarte.ch/de/projekte/publikationen/bpa/complete-code-and-data-files-of-the-book.html
> stan_data <- read_rdump("cjs_cov_raneff.data.R")
> 
> ## Initial values
> inits <- function(){list(mu = rnorm(1),
+                          sigma = runif(1, 0, 5),
+                          beta = runif(1, -5, 5),
+                          mean_p = runif(1, 0, 1))}  
> 
> ## Parameters monitored
> params <- c("mean_phi", "mean_p", "phi_est", "sigma2", "beta")
> 
> # MCMC settings
> ni <- 4000
> nt <- 3
> nb <- 1000
> nc <- 4
> 
> ## Call Stan from R
> cjs_cov <- stan("cjs_cov_raneff.stan",
+                 data = stan_data, init = inits, pars = params,
+                 chains = nc, iter = ni, warmup = nb, thin = nt,
+                 seed = 1,
+                 open_progress = FALSE)
starting worker pid=8553 on localhost:11036 at 22:59:03.995
starting worker pid=8561 on localhost:11036 at 22:59:04.120
starting worker pid=8569 on localhost:11036 at 22:59:04.245
starting worker pid=8577 on localhost:11036 at 22:59:04.370

SAMPLING FOR MODEL 'cjs_cov_raneff' NOW (CHAIN 1).

Chain 1, Iteration:    1 / 4000 [  0%]  (Warmup)
SAMPLING FOR MODEL 'cjs_cov_raneff' NOW (CHAIN 2).

Chain 2, Iteration:    1 / 4000 [  0%]  (Warmup)
SAMPLING FOR MODEL 'cjs_cov_raneff' NOW (CHAIN 3).

Chain 3, Iteration:    1 / 4000 [  0%]  (Warmup)
SAMPLING FOR MODEL 'cjs_cov_raneff' NOW (CHAIN 4).

Chain 4, Iteration:    1 / 4000 [  0%]  (Warmup)
Chain 1, Iteration:  400 / 4000 [ 10%]  (Warmup)
Chain 4, Iteration:  400 / 4000 [ 10%]  (Warmup)
Chain 2, Iteration:  400 / 4000 [ 10%]  (Warmup)
Chain 3, Iteration:  400 / 4000 [ 10%]  (Warmup)
Chain 1, Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 4, Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 1, Iteration: 1001 / 4000 [ 25%]  (Sampling)
Chain 3, Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 4, Iteration: 1001 / 4000 [ 25%]  (Sampling)
Chain 3, Iteration: 1001 / 4000 [ 25%]  (Sampling)
Chain 2, Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 1, Iteration: 1400 / 4000 [ 35%]  (Sampling)
Chain 3, Iteration: 1400 / 4000 [ 35%]  (Sampling)
Chain 2, Iteration: 1001 / 4000 [ 25%]  (Sampling)
Chain 4, Iteration: 1400 / 4000 [ 35%]  (Sampling)
Chain 3, Iteration: 1800 / 4000 [ 45%]  (Sampling)
Chain 1, Iteration: 1800 / 4000 [ 45%]  (Sampling)
Chain 3, Iteration: 2200 / 4000 [ 55%]  (Sampling)
Chain 2, Iteration: 1400 / 4000 [ 35%]  (Sampling)
Chain 4, Iteration: 1800 / 4000 [ 45%]  (Sampling)
Chain 1, Iteration: 2200 / 4000 [ 55%]  (Sampling)
Chain 3, Iteration: 2600 / 4000 [ 65%]  (Sampling)
Chain 2, Iteration: 1800 / 4000 [ 45%]  (Sampling)
Chain 3, Iteration: 3000 / 4000 [ 75%]  (Sampling)
Chain 1, Iteration: 2600 / 4000 [ 65%]  (Sampling)
Chain 2, Iteration: 2200 / 4000 [ 55%]  (Sampling)
Chain 4, Iteration: 2200 / 4000 [ 55%]  (Sampling)
Chain 3, Iteration: 3400 / 4000 [ 85%]  (Sampling)
Chain 1, Iteration: 3000 / 4000 [ 75%]  (Sampling)
Chain 2, Iteration: 2600 / 4000 [ 65%]  (Sampling)
Chain 3, Iteration: 3800 / 4000 [ 95%]  (Sampling)
Chain 3, Iteration: 4000 / 4000 [100%]  (Sampling)
#  Elapsed Time: 15.9334 seconds (Warm-up)
#                36.3528 seconds (Sampling)
#                52.2862 seconds (Total)


Chain 4, Iteration: 2600 / 4000 [ 65%]  (Sampling)
Chain 1, Iteration: 3400 / 4000 [ 85%]  (Sampling)
Chain 2, Iteration: 3000 / 4000 [ 75%]  (Sampling)
Chain 1, Iteration: 3800 / 4000 [ 95%]  (Sampling)
Chain 1, Iteration: 4000 / 4000 [100%]  (Sampling)
#  Elapsed Time: 13.685 seconds (Warm-up)
#                47.6249 seconds (Sampling)
#                61.3099 seconds (Total)


Chain 4, Iteration: 3000 / 4000 [ 75%]  (Sampling)
Chain 2, Iteration: 3400 / 4000 [ 85%]  (Sampling)
Chain 2, Iteration: 3800 / 4000 [ 95%]  (Sampling)
Chain 4, Iteration: 3400 / 4000 [ 85%]  (Sampling)
Chain 2, Iteration: 4000 / 4000 [100%]  (Sampling)
#  Elapsed Time: 22.8422 seconds (Warm-up)
#                49.2072 seconds (Sampling)
#                72.0493 seconds (Total)


Chain 4, Iteration: 3800 / 4000 [ 95%]  (Sampling)
Chain 4, Iteration: 4000 / 4000 [100%]  (Sampling)
#  Elapsed Time: 14.4471 seconds (Warm-up)
#                67.1839 seconds (Sampling)
#                81.631 seconds (Total)

> 
> ## Summarize posteriors
> print(cjs_cov, digits = 3)
Inference for Stan model: cjs_cov_raneff.
4 chains, each with iter=4000; warmup=1000; thin=3; 
post-warmup draws per chain=1000, total post-warmup draws=4000.

                mean se_mean     sd     2.5%      25%      50%      75%
mean_phi       0.665   0.001  0.038    0.597    0.640    0.663    0.688
mean_p         0.366   0.001  0.031    0.305    0.344    0.365    0.387
phi_est[1]     0.609   0.002  0.093    0.371    0.566    0.624    0.666
phi_est[2]     0.444   0.002  0.109    0.251    0.366    0.436    0.515
phi_est[3]     0.762   0.002  0.080    0.597    0.711    0.763    0.815
phi_est[4]     0.638   0.002  0.087    0.428    0.592    0.651    0.695
phi_est[5]     0.676   0.002  0.085    0.478    0.632    0.684    0.729
phi_est[6]     0.507   0.002  0.087    0.341    0.450    0.505    0.562
phi_est[7]     0.725   0.001  0.075    0.567    0.680    0.726    0.772
phi_est[8]     0.715   0.003  0.076    0.585    0.661    0.705    0.764
phi_est[9]     0.564   0.001  0.074    0.397    0.523    0.568    0.611
phi_est[10]    0.762   0.002  0.076    0.615    0.712    0.761    0.812
phi_est[11]    0.495   0.002  0.085    0.335    0.438    0.491    0.548
phi_est[12]    0.606   0.001  0.073    0.463    0.563    0.603    0.646
phi_est[13]    0.780   0.002  0.073    0.638    0.730    0.778    0.830
phi_est[14]    0.673   0.003  0.077    0.549    0.620    0.660    0.717
phi_est[15]    0.682   0.001  0.071    0.539    0.638    0.681    0.723
phi_est[16]    0.575   0.003  0.084    0.376    0.529    0.589    0.633
phi_est[17]    0.649   0.001  0.079    0.477    0.609    0.653    0.698
phi_est[18]    0.584   0.002  0.085    0.433    0.528    0.577    0.632
phi_est[19]    0.777   0.002  0.081    0.605    0.725    0.781    0.834
sigma2         0.180   0.010  0.255    0.002    0.028    0.095    0.233
beta          -0.433   0.005  0.214   -0.860   -0.569   -0.426   -0.291
lp__        -450.417   0.895 13.012 -471.422 -459.781 -452.765 -442.306
               97.5% n_eff  Rhat
mean_phi       0.742  1631 1.004
mean_p         0.428  1920 1.001
phi_est[1]     0.765  2761 1.001
phi_est[2]     0.681  2607 1.000
phi_est[3]     0.918  2244 1.001
phi_est[4]     0.781  1439 1.000
phi_est[5]     0.826  2732 1.000
phi_est[6]     0.689  3172 1.000
phi_est[7]     0.865  3436 1.000
phi_est[8]     0.882   868 1.005
phi_est[9]     0.703  2867 0.999
phi_est[10]    0.912  2517 1.002
phi_est[11]    0.669  2880 1.002
phi_est[12]    0.762  3883 1.000
phi_est[13]    0.922  1038 1.003
phi_est[14]    0.847   929 1.005
phi_est[15]    0.831  2955 1.002
phi_est[16]    0.707  1080 1.002
phi_est[17]    0.802  4000 1.000
phi_est[18]    0.777  1886 1.001
phi_est[19]    0.924  2259 1.001
sigma2         0.845   613 1.006
beta          -0.026  2212 1.001
lp__        -422.600   211 1.013

Samples were drawn using NUTS(diag_e) at Wed Dec 16 23:00:29 2015.
For each parameter, n_eff is a crude measure of effective sample size,
and Rhat is the potential scale reduction factor on split chains (at 
convergence, Rhat=1).
> 
> proc.time()
   user  system elapsed 
 19.426   0.657 105.087 
