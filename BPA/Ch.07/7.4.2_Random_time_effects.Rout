
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ## 7. Estimation of survival probabilities using capture-recapture data
> ## 7.4. Models with time-variation
> ## 7.4.2. Random time effects
> 
> library(rstan)
Loading required package: ggplot2
rstan (Version 2.8.1, packaged: 2015-11-18 17:18:35 UTC, GitRev: 05c3d0058b6a)
For execution on a local, multicore CPU with excess RAM we recommend calling
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
> rstan_options(auto_write = TRUE)
> options(mc.cores = parallel::detectCores())
> set.seed(123)
> 
> ## Read data
> ## The data generation code is in bpa-code.txt, available at
> ## http://www.vogelwarte.ch/de/projekte/publikationen/bpa/complete-code-and-data-files-of-the-book.html
> stan_data <- read_rdump("cjs_temp_raneff.data.R")
> 
> ## Initial values
> inits <- function() list(mean_phi = runif(1, 0, 1),
+                          sigma = runif(1, 0, 10),
+                          mean_p = runif(1, 0, 1))
> 
> ## Parameters monitored
> params <- c("mean_phi", "mean_p", "sigma2")
> 
> ## MCMC settings
> ni <- 4000
> nt <- 3
> nb <- 1000
> nc <- 4
> 
> ## Call Stan from R
> cjs_temp_raneff <- stan("cjs_temp_raneff.stan",
+                         data = stan_data, init = inits, pars = params,
+                         chains = nc, iter = ni, warmup = nb, thin = nt,
+                         seed = 1,
+                         open_progress = FALSE)
starting worker pid=8423 on localhost:11495 at 22:56:23.534
starting worker pid=8431 on localhost:11495 at 22:56:23.670
starting worker pid=8439 on localhost:11495 at 22:56:23.808
starting worker pid=8447 on localhost:11495 at 22:56:23.946

SAMPLING FOR MODEL 'cjs_temp_raneff' NOW (CHAIN 1).

Chain 1, Iteration:    1 / 4000 [  0%]  (Warmup)
SAMPLING FOR MODEL 'cjs_temp_raneff' NOW (CHAIN 2).

Chain 2, Iteration:    1 / 4000 [  0%]  (Warmup)
SAMPLING FOR MODEL 'cjs_temp_raneff' NOW (CHAIN 3).

Chain 3, Iteration:    1 / 4000 [  0%]  (Warmup)
SAMPLING FOR MODEL 'cjs_temp_raneff' NOW (CHAIN 4).

Chain 4, Iteration:    1 / 4000 [  0%]  (Warmup)
Chain 3, Iteration:  400 / 4000 [ 10%]  (Warmup)
Chain 1, Iteration:  400 / 4000 [ 10%]  (Warmup)
Chain 2, Iteration:  400 / 4000 [ 10%]  (Warmup)
Chain 4, Iteration:  400 / 4000 [ 10%]  (Warmup)
Chain 1, Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 3, Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 2, Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 4, Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 1, Iteration: 1001 / 4000 [ 25%]  (Sampling)
Chain 3, Iteration: 1001 / 4000 [ 25%]  (Sampling)
Chain 2, Iteration: 1001 / 4000 [ 25%]  (Sampling)
Chain 4, Iteration: 1001 / 4000 [ 25%]  (Sampling)
Chain 3, Iteration: 1400 / 4000 [ 35%]  (Sampling)
Chain 1, Iteration: 1400 / 4000 [ 35%]  (Sampling)
Chain 2, Iteration: 1400 / 4000 [ 35%]  (Sampling)
Chain 4, Iteration: 1400 / 4000 [ 35%]  (Sampling)
Chain 3, Iteration: 1800 / 4000 [ 45%]  (Sampling)
Chain 2, Iteration: 1800 / 4000 [ 45%]  (Sampling)
Chain 1, Iteration: 1800 / 4000 [ 45%]  (Sampling)
Chain 4, Iteration: 1800 / 4000 [ 45%]  (Sampling)
Chain 3, Iteration: 2200 / 4000 [ 55%]  (Sampling)
Chain 2, Iteration: 2200 / 4000 [ 55%]  (Sampling)
Chain 1, Iteration: 2200 / 4000 [ 55%]  (Sampling)
Chain 4, Iteration: 2200 / 4000 [ 55%]  (Sampling)
Chain 3, Iteration: 2600 / 4000 [ 65%]  (Sampling)
Chain 2, Iteration: 2600 / 4000 [ 65%]  (Sampling)
Chain 4, Iteration: 2600 / 4000 [ 65%]  (Sampling)
Chain 1, Iteration: 2600 / 4000 [ 65%]  (Sampling)
Chain 3, Iteration: 3000 / 4000 [ 75%]  (Sampling)
Chain 2, Iteration: 3000 / 4000 [ 75%]  (Sampling)
Chain 4, Iteration: 3000 / 4000 [ 75%]  (Sampling)
Chain 1, Iteration: 3000 / 4000 [ 75%]  (Sampling)
Chain 3, Iteration: 3400 / 4000 [ 85%]  (Sampling)
Chain 2, Iteration: 3400 / 4000 [ 85%]  (Sampling)
Chain 4, Iteration: 3400 / 4000 [ 85%]  (Sampling)
Chain 1, Iteration: 3400 / 4000 [ 85%]  (Sampling)
Chain 3, Iteration: 3800 / 4000 [ 95%]  (Sampling)
Chain 2, Iteration: 3800 / 4000 [ 95%]  (Sampling)
Chain 4, Iteration: 3800 / 4000 [ 95%]  (Sampling)
Chain 3, Iteration: 4000 / 4000 [100%]  (Sampling)
#  Elapsed Time: 31.5848 seconds (Warm-up)
#                98.6014 seconds (Sampling)
#                130.186 seconds (Total)


Chain 1, Iteration: 3800 / 4000 [ 95%]  (Sampling)
Chain 2, Iteration: 4000 / 4000 [100%]  (Sampling)
#  Elapsed Time: 32.3095 seconds (Warm-up)
#                101.359 seconds (Sampling)
#                133.669 seconds (Total)


Chain 4, Iteration: 4000 / 4000 [100%]  (Sampling)
#  Elapsed Time: 32.9472 seconds (Warm-up)
#                101.427 seconds (Sampling)
#                134.375 seconds (Total)


Chain 1, Iteration: 4000 / 4000 [100%]  (Sampling)
#  Elapsed Time: 32.4194 seconds (Warm-up)
#                105.196 seconds (Sampling)
#                137.615 seconds (Total)

> 
> ## Summarize posteriors
> print(cjs_temp_raneff, digits = 3)
Inference for Stan model: cjs_temp_raneff.
4 chains, each with iter=4000; warmup=1000; thin=3; 
post-warmup draws per chain=1000, total post-warmup draws=4000.

             mean se_mean    sd     2.5%      25%      50%      75%    97.5%
mean_phi    0.600   0.001 0.055    0.496    0.564    0.596    0.634    0.718
mean_p      0.409   0.000 0.028    0.357    0.390    0.409    0.428    0.464
sigma2      0.767   0.011 0.526    0.166    0.417    0.636    0.974    2.078
lp__     -776.803   0.100 4.400 -786.006 -779.633 -776.583 -773.735 -768.842
         n_eff  Rhat
mean_phi  2032 1.003
mean_p    4000 1.000
sigma2    2142 1.002
lp__      1947 1.004

Samples were drawn using NUTS(diag_e) at Wed Dec 16 22:58:43 2015.
For each parameter, n_eff is a crude measure of effective sample size,
and Rhat is the potential scale reduction factor on split chains (at 
convergence, Rhat=1).
> 
> proc.time()
   user  system elapsed 
 21.201   0.744 161.906 
