
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ## 7. Estimation of survival probabilities using capture-recapture data
> ## 7.6. Models with time and group effects
> ## 7.6.1. Fixed group and time effects
> 
> library(rstan)
Loading required package: ggplot2
rstan (Version 2.8.1, packaged: 2015-11-18 17:18:35 UTC, GitRev: 05c3d0058b6a)
For execution on a local, multicore CPU with excess RAM we recommend calling
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
> rstan_options(auto_write = TRUE)
> options(mc.cores = parallel::detectCores())
> set.seed(123)
> 
> ## Read data
> ## The data generation code is in bpa-code.txt, available at
> ## http://www.vogelwarte.ch/de/projekte/publikationen/bpa/complete-code-and-data-files-of-the-book.html
> stan_data <- read_rdump("cjs_add.data.R")
> 
> ## Parameters monitored
> params <- c("phi_g1", "phi_g2", "p_g", "beta")
> 
> ## MCMC settings
> ni <- 3000
> nt <- 2
> nb <- 1000
> nc <- 4
> 
> ## Initial values
> inits <- lapply(1:nc, function(i) {
+     list(gamma = rnorm(stan_data$n_occasions - 1),
+          beta = c(0, rnorm(1)),
+          p_g = runif(length(unique(stan_data$group)), 0, 1))})
> 
> ## Call Stan from R
> cjs_add  <- stan("cjs_add.stan",
+                  data = stan_data, init = inits, pars = params,
+                  chains = nc, iter = ni, warmup = nb, thin = nt,
+                  seed = 1,
+                  open_progress = FALSE)
starting worker pid=9074 on localhost:11483 at 23:11:17.850
starting worker pid=9082 on localhost:11483 at 23:11:17.977
starting worker pid=9090 on localhost:11483 at 23:11:18.103
starting worker pid=9098 on localhost:11483 at 23:11:18.225

SAMPLING FOR MODEL 'cjs_add' NOW (CHAIN 1).

Chain 1, Iteration:    1 / 3000 [  0%]  (Warmup)
SAMPLING FOR MODEL 'cjs_add' NOW (CHAIN 2).

Chain 2, Iteration:    1 / 3000 [  0%]  (Warmup)
SAMPLING FOR MODEL 'cjs_add' NOW (CHAIN 3).

Chain 3, Iteration:    1 / 3000 [  0%]  (Warmup)
SAMPLING FOR MODEL 'cjs_add' NOW (CHAIN 4).

Chain 4, Iteration:    1 / 3000 [  0%]  (Warmup)
Chain 2, Iteration:  300 / 3000 [ 10%]  (Warmup)
Chain 4, Iteration:  300 / 3000 [ 10%]  (Warmup)
Chain 3, Iteration:  300 / 3000 [ 10%]  (Warmup)
Chain 1, Iteration:  300 / 3000 [ 10%]  (Warmup)
Chain 2, Iteration:  600 / 3000 [ 20%]  (Warmup)
Chain 4, Iteration:  600 / 3000 [ 20%]  (Warmup)
Chain 2, Iteration:  900 / 3000 [ 30%]  (Warmup)
Chain 1, Iteration:  600 / 3000 [ 20%]  (Warmup)
Chain 4, Iteration:  900 / 3000 [ 30%]  (Warmup)
Chain 1, Iteration:  900 / 3000 [ 30%]  (Warmup)
Chain 2, Iteration: 1001 / 3000 [ 33%]  (Sampling)
Chain 1, Iteration: 1001 / 3000 [ 33%]  (Sampling)
Chain 4, Iteration: 1001 / 3000 [ 33%]  (Sampling)
Chain 3, Iteration:  600 / 3000 [ 20%]  (Warmup)
Chain 1, Iteration: 1300 / 3000 [ 43%]  (Sampling)
Chain 1, Iteration: 1600 / 3000 [ 53%]  (Sampling)
Chain 3, Iteration:  900 / 3000 [ 30%]  (Warmup)
Chain 1, Iteration: 1900 / 3000 [ 63%]  (Sampling)
Chain 4, Iteration: 1300 / 3000 [ 43%]  (Sampling)
Chain 2, Iteration: 1300 / 3000 [ 43%]  (Sampling)
Chain 3, Iteration: 1001 / 3000 [ 33%]  (Sampling)
Chain 1, Iteration: 2200 / 3000 [ 73%]  (Sampling)
Chain 1, Iteration: 2500 / 3000 [ 83%]  (Sampling)
Chain 1, Iteration: 2800 / 3000 [ 93%]  (Sampling)
Chain 4, Iteration: 1600 / 3000 [ 53%]  (Sampling)
Chain 1, Iteration: 3000 / 3000 [100%]  (Sampling)
#  Elapsed Time: 40.3445 seconds (Warm-up)
#                80.5647 seconds (Sampling)
#                120.909 seconds (Total)


Chain 2, Iteration: 1600 / 3000 [ 53%]  (Sampling)
Chain 3, Iteration: 1300 / 3000 [ 43%]  (Sampling)
Chain 4, Iteration: 1900 / 3000 [ 63%]  (Sampling)
Chain 3, Iteration: 1600 / 3000 [ 53%]  (Sampling)
Chain 2, Iteration: 1900 / 3000 [ 63%]  (Sampling)
Chain 4, Iteration: 2200 / 3000 [ 73%]  (Sampling)
Chain 3, Iteration: 1900 / 3000 [ 63%]  (Sampling)
Chain 2, Iteration: 2200 / 3000 [ 73%]  (Sampling)
Chain 4, Iteration: 2500 / 3000 [ 83%]  (Sampling)
Chain 3, Iteration: 2200 / 3000 [ 73%]  (Sampling)
Chain 2, Iteration: 2500 / 3000 [ 83%]  (Sampling)
Chain 4, Iteration: 2800 / 3000 [ 93%]  (Sampling)
Chain 4, Iteration: 3000 / 3000 [100%]  (Sampling)
#  Elapsed Time: 41.7563 seconds (Warm-up)
#                221.072 seconds (Sampling)
#                262.828 seconds (Total)


Chain 3, Iteration: 2500 / 3000 [ 83%]  (Sampling)
Chain 2, Iteration: 2800 / 3000 [ 93%]  (Sampling)
Chain 2, Iteration: 3000 / 3000 [100%]  (Sampling)
#  Elapsed Time: 36.5591 seconds (Warm-up)
#                268.773 seconds (Sampling)
#                305.332 seconds (Total)


Chain 3, Iteration: 2800 / 3000 [ 93%]  (Sampling)
Chain 3, Iteration: 3000 / 3000 [100%]  (Sampling)
#  Elapsed Time: 84.0501 seconds (Warm-up)
#                247.872 seconds (Sampling)
#                331.922 seconds (Total)

> 
> ## Summarize posteriors
> print(cjs_add, digits = 3)
Inference for Stan model: cjs_add.
4 chains, each with iter=3000; warmup=1000; thin=2; 
post-warmup draws per chain=1000, total post-warmup draws=4000.

                mean se_mean    sd      2.5%       25%       50%       75%
phi_g1[1]      0.784   0.003 0.100     0.607     0.715     0.773     0.842
phi_g1[2]      0.503   0.001 0.060     0.387     0.463     0.501     0.542
phi_g1[3]      0.606   0.001 0.063     0.489     0.562     0.604     0.648
phi_g1[4]      0.631   0.001 0.064     0.513     0.587     0.631     0.673
phi_g1[5]      0.570   0.001 0.059     0.460     0.528     0.569     0.609
phi_g1[6]      0.371   0.001 0.048     0.281     0.338     0.370     0.403
phi_g1[7]      0.676   0.001 0.068     0.549     0.629     0.672     0.722
phi_g1[8]      0.509   0.001 0.054     0.408     0.473     0.508     0.544
phi_g1[9]      0.667   0.001 0.064     0.546     0.622     0.667     0.709
phi_g1[10]     0.550   0.001 0.057     0.442     0.511     0.549     0.588
phi_g1[11]     0.644   0.001 0.076     0.502     0.592     0.640     0.694
phi_g2[1]      0.834   0.002 0.080     0.686     0.780     0.829     0.883
phi_g2[2]      0.587   0.001 0.059     0.472     0.546     0.587     0.626
phi_g2[3]      0.683   0.001 0.060     0.568     0.641     0.680     0.722
phi_g2[4]      0.706   0.001 0.057     0.595     0.666     0.708     0.745
phi_g2[5]      0.650   0.001 0.056     0.545     0.612     0.650     0.688
phi_g2[6]      0.454   0.001 0.050     0.358     0.418     0.453     0.487
phi_g2[7]      0.745   0.001 0.061     0.627     0.703     0.745     0.787
phi_g2[8]      0.593   0.001 0.054     0.489     0.557     0.594     0.629
phi_g2[9]      0.737   0.001 0.056     0.627     0.699     0.739     0.775
phi_g2[10]     0.632   0.001 0.055     0.523     0.595     0.631     0.669
phi_g2[11]     0.717   0.001 0.069     0.586     0.670     0.715     0.763
p_g[1]         0.587   0.001 0.030     0.528     0.567     0.588     0.608
p_g[2]         0.320   0.000 0.024     0.274     0.304     0.319     0.336
beta[1]        0.000   0.000 0.000     0.000     0.000     0.000     0.000
beta[2]        0.344   0.002 0.122     0.106     0.262     0.345     0.427
lp__       -1616.825   0.079 3.220 -1624.198 -1618.745 -1616.455 -1614.486
               97.5% n_eff  Rhat
phi_g1[1]      1.000  1114 1.002
phi_g1[2]      0.624  2493 1.000
phi_g1[3]      0.734  3438 1.001
phi_g1[4]      0.761  3253 0.999
phi_g1[5]      0.691  3700 1.000
phi_g1[6]      0.470  3199 1.000
phi_g1[7]      0.815  3348 1.000
phi_g1[8]      0.621  3464 1.000
phi_g1[9]      0.796  3460 1.000
phi_g1[10]     0.669  3362 1.001
phi_g1[11]     0.801  3449 1.000
phi_g2[1]      1.000  1179 1.002
phi_g2[2]      0.702  2986 1.000
phi_g2[3]      0.800  3323 1.001
phi_g2[4]      0.817  3514 0.999
phi_g2[5]      0.759  3630 1.000
phi_g2[6]      0.552  3270 0.999
phi_g2[7]      0.865  3320 1.000
phi_g2[8]      0.698  3682 0.999
phi_g2[9]      0.846  3323 1.001
phi_g2[10]     0.740  3461 1.000
phi_g2[11]     0.852  3451 1.001
p_g[1]         0.644  2793 1.000
p_g[2]         0.367  3767 1.000
beta[1]        0.000  4000   NaN
beta[2]        0.584  3231 1.000
lp__       -1611.551  1669 1.000

Samples were drawn using NUTS(diag_e) at Wed Dec 16 23:17:01 2015.
For each parameter, n_eff is a crude measure of effective sample size,
and Rhat is the potential scale reduction factor on split chains (at 
convergence, Rhat=1).
> 
> proc.time()
   user  system elapsed 
 19.857   0.672 364.116 
