
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ## 7. Estimation of survival probabilities using capture-recapture data
> ## 7.7. Models with age effects
> 
> library(rstan)
Loading required package: ggplot2
rstan (Version 2.8.1, packaged: 2015-11-18 17:18:35 UTC, GitRev: 05c3d0058b6a)
For execution on a local, multicore CPU with excess RAM we recommend calling
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
> rstan_options(auto_write = TRUE)
> options(mc.cores = parallel::detectCores())
> set.seed(123)
> 
> ## Read data
> ## The data generation code is in bpa-code.txt, available at
> ## http://www.vogelwarte.ch/de/projekte/publikationen/bpa/complete-code-and-data-files-of-the-book.html
> stan_data <- read_rdump("cjs_age.data.R")
> 
> ## Parameters monitored
> params <- c("beta", "mean_p")
> 
> ## MCMC settings
> ni <- 2000
> nt <- 1
> nb <- 1000
> nc <- 4
> 
> ## Initial values
> inits <- function() list(beta = runif(2, 0, 1),
+                          mean_p = runif(1, 0, 1))
> 
> ## Call Stan from R
> cjs_age  <- stan("cjs_age.stan",
+                  data = stan_data, init = inits, pars = params,
+                  chains = nc, iter = ni, warmup = nb, thin = nt,
+                  seed = 1,
+                  open_progress = FALSE)
starting worker pid=9337 on localhost:11261 at 23:18:53.046
starting worker pid=9345 on localhost:11261 at 23:18:53.177
starting worker pid=9353 on localhost:11261 at 23:18:53.311
starting worker pid=9361 on localhost:11261 at 23:18:53.442

SAMPLING FOR MODEL 'cjs_age' NOW (CHAIN 1).

Chain 1, Iteration:    1 / 2000 [  0%]  (Warmup)
SAMPLING FOR MODEL 'cjs_age' NOW (CHAIN 2).

Chain 2, Iteration:    1 / 2000 [  0%]  (Warmup)
SAMPLING FOR MODEL 'cjs_age' NOW (CHAIN 3).

Chain 3, Iteration:    1 / 2000 [  0%]  (Warmup)
SAMPLING FOR MODEL 'cjs_age' NOW (CHAIN 4).

Chain 4, Iteration:    1 / 2000 [  0%]  (Warmup)
Chain 1, Iteration:  200 / 2000 [ 10%]  (Warmup)
Chain 2, Iteration:  200 / 2000 [ 10%]  (Warmup)
Chain 3, Iteration:  200 / 2000 [ 10%]  (Warmup)
Chain 4, Iteration:  200 / 2000 [ 10%]  (Warmup)
Chain 1, Iteration:  400 / 2000 [ 20%]  (Warmup)
Chain 2, Iteration:  400 / 2000 [ 20%]  (Warmup)
Chain 3, Iteration:  400 / 2000 [ 20%]  (Warmup)
Chain 4, Iteration:  400 / 2000 [ 20%]  (Warmup)
Chain 1, Iteration:  600 / 2000 [ 30%]  (Warmup)
Chain 2, Iteration:  600 / 2000 [ 30%]  (Warmup)
Chain 3, Iteration:  600 / 2000 [ 30%]  (Warmup)
Chain 4, Iteration:  600 / 2000 [ 30%]  (Warmup)
Chain 1, Iteration:  800 / 2000 [ 40%]  (Warmup)
Chain 3, Iteration:  800 / 2000 [ 40%]  (Warmup)
Chain 2, Iteration:  800 / 2000 [ 40%]  (Warmup)
Chain 4, Iteration:  800 / 2000 [ 40%]  (Warmup)
Chain 1, Iteration: 1000 / 2000 [ 50%]  (Warmup)
Chain 1, Iteration: 1001 / 2000 [ 50%]  (Sampling)
Chain 2, Iteration: 1000 / 2000 [ 50%]  (Warmup)
Chain 2, Iteration: 1001 / 2000 [ 50%]  (Sampling)
Chain 3, Iteration: 1000 / 2000 [ 50%]  (Warmup)
Chain 3, Iteration: 1001 / 2000 [ 50%]  (Sampling)
Chain 4, Iteration: 1000 / 2000 [ 50%]  (Warmup)
Chain 4, Iteration: 1001 / 2000 [ 50%]  (Sampling)
Chain 1, Iteration: 1200 / 2000 [ 60%]  (Sampling)
Chain 2, Iteration: 1200 / 2000 [ 60%]  (Sampling)
Chain 3, Iteration: 1200 / 2000 [ 60%]  (Sampling)
Chain 4, Iteration: 1200 / 2000 [ 60%]  (Sampling)
Chain 1, Iteration: 1400 / 2000 [ 70%]  (Sampling)
Chain 2, Iteration: 1400 / 2000 [ 70%]  (Sampling)
Chain 3, Iteration: 1400 / 2000 [ 70%]  (Sampling)
Chain 1, Iteration: 1600 / 2000 [ 80%]  (Sampling)
Chain 4, Iteration: 1400 / 2000 [ 70%]  (Sampling)
Chain 2, Iteration: 1600 / 2000 [ 80%]  (Sampling)
Chain 3, Iteration: 1600 / 2000 [ 80%]  (Sampling)
Chain 1, Iteration: 1800 / 2000 [ 90%]  (Sampling)
Chain 4, Iteration: 1600 / 2000 [ 80%]  (Sampling)
Chain 2, Iteration: 1800 / 2000 [ 90%]  (Sampling)
Chain 1, Iteration: 2000 / 2000 [100%]  (Sampling)
#  Elapsed Time: 19.3806 seconds (Warm-up)
#                18.2357 seconds (Sampling)
#                37.6162 seconds (Total)


Chain 3, Iteration: 1800 / 2000 [ 90%]  (Sampling)
Chain 4, Iteration: 1800 / 2000 [ 90%]  (Sampling)
Chain 2, Iteration: 2000 / 2000 [100%]  (Sampling)
#  Elapsed Time: 19.4271 seconds (Warm-up)
#                19.3135 seconds (Sampling)
#                38.7406 seconds (Total)


Chain 3, Iteration: 2000 / 2000 [100%]  (Sampling)
#  Elapsed Time: 19.0836 seconds (Warm-up)
#                21.8693 seconds (Sampling)
#                40.9529 seconds (Total)


Chain 4, Iteration: 2000 / 2000 [100%]  (Sampling)
#  Elapsed Time: 20.3301 seconds (Warm-up)
#                20.8331 seconds (Sampling)
#                41.1633 seconds (Total)

> 
> ## Summarize posteriors
> print(cjs_age, digits = 3)
Inference for Stan model: cjs_age.
4 chains, each with iter=2000; warmup=1000; thin=1; 
post-warmup draws per chain=1000, total post-warmup draws=4000.

             mean se_mean    sd      2.5%       25%       50%       75%
beta[1]     0.321   0.000 0.017     0.290     0.310     0.321     0.332
beta[2]     0.643   0.000 0.015     0.613     0.634     0.643     0.653
mean_p      0.470   0.000 0.019     0.432     0.456     0.470     0.483
lp__    -2221.612   0.034 1.255 -2224.791 -2222.169 -2221.280 -2220.713
            97.5% n_eff  Rhat
beta[1]     0.354  1761 1.001
beta[2]     0.672  2255 1.001
mean_p      0.508  1670 1.000
lp__    -2220.210  1392 1.005

Samples were drawn using NUTS(diag_e) at Wed Dec 16 23:19:37 2015.
For each parameter, n_eff is a crude measure of effective sample size,
and Rhat is the potential scale reduction factor on split chains (at 
convergence, Rhat=1).
> 
> proc.time()
   user  system elapsed 
 20.649   0.713  66.181 
