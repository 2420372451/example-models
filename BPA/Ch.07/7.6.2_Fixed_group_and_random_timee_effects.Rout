
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ## 7. Estimation of survival probabilities using capture-recapture data
> ## 7.6. Models with time and group effects
> ## 7.6.2. Fixed group and random time effects
> 
> library(rstan)
Loading required package: ggplot2
rstan (Version 2.8.1, packaged: 2015-11-18 17:18:35 UTC, GitRev: 05c3d0058b6a)
For execution on a local, multicore CPU with excess RAM we recommend calling
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
> rstan_options(auto_write = TRUE)
> options(mc.cores = parallel::detectCores())
> set.seed(123)
> 
> ## Read data
> ## The data generation code is in bpa-code.txt, available at
> ## http://www.vogelwarte.ch/de/projekte/publikationen/bpa/complete-code-and-data-files-of-the-book.html
> stan_data <- read_rdump("cjs_add.data.R")
> 
> ## Parameters monitored
> params <- c("eta_phi", "p_g", "Sigma", "mean_phi")
> 
> ## MCMC settings
> ni <- 2000
> nt <- 1
> nb <- 1000
> nc <- 4
> 
> ## Initial values
> inits <- lapply(1:nc, function(i) {
+     list(p_g = runif(length(unique(stan_data$group)), 0, 1),
+          Omega = matrix(c(1, 0, 0, 1), ncol = 2))})
> 
> ## Call Stan from R
> cjs_temp_corr <- stan("cjs_temp_corr.stan",
+                       data = stan_data, init = inits, pars = params,
+                       chains = nc, iter = ni, warmup = nb, thin = nt,
+                       seed = 1,
+                       open_progress = FALSE)
starting worker pid=9207 on localhost:11898 at 23:17:28.659
starting worker pid=9215 on localhost:11898 at 23:17:28.804
starting worker pid=9223 on localhost:11898 at 23:17:28.938
starting worker pid=9231 on localhost:11898 at 23:17:29.072

SAMPLING FOR MODEL 'cjs_temp_corr' NOW (CHAIN 1).

Chain 1, Iteration:    1 / 2000 [  0%]  (Warmup)
SAMPLING FOR MODEL 'cjs_temp_corr' NOW (CHAIN 2).

Chain 2, Iteration:    1 / 2000 [  0%]  (Warmup)
SAMPLING FOR MODEL 'cjs_temp_corr' NOW (CHAIN 3).

Chain 3, Iteration:    1 / 2000 [  0%]  (Warmup)
SAMPLING FOR MODEL 'cjs_temp_corr' NOW (CHAIN 4).

Chain 4, Iteration:    1 / 2000 [  0%]  (Warmup)
Chain 1, Iteration:  200 / 2000 [ 10%]  (Warmup)
Chain 2, Iteration:  200 / 2000 [ 10%]  (Warmup)
Chain 3, Iteration:  200 / 2000 [ 10%]  (Warmup)
Chain 4, Iteration:  200 / 2000 [ 10%]  (Warmup)
Chain 1, Iteration:  400 / 2000 [ 20%]  (Warmup)
Chain 2, Iteration:  400 / 2000 [ 20%]  (Warmup)
Chain 3, Iteration:  400 / 2000 [ 20%]  (Warmup)
Chain 4, Iteration:  400 / 2000 [ 20%]  (Warmup)
Chain 1, Iteration:  600 / 2000 [ 30%]  (Warmup)
Chain 2, Iteration:  600 / 2000 [ 30%]  (Warmup)
Chain 3, Iteration:  600 / 2000 [ 30%]  (Warmup)
Chain 4, Iteration:  600 / 2000 [ 30%]  (Warmup)
Chain 1, Iteration:  800 / 2000 [ 40%]  (Warmup)
Chain 2, Iteration:  800 / 2000 [ 40%]  (Warmup)
Chain 3, Iteration:  800 / 2000 [ 40%]  (Warmup)
Chain 4, Iteration:  800 / 2000 [ 40%]  (Warmup)
Chain 1, Iteration: 1000 / 2000 [ 50%]  (Warmup)
Chain 1, Iteration: 1001 / 2000 [ 50%]  (Sampling)
Chain 2, Iteration: 1000 / 2000 [ 50%]  (Warmup)
Chain 2, Iteration: 1001 / 2000 [ 50%]  (Sampling)
Chain 3, Iteration: 1000 / 2000 [ 50%]  (Warmup)
Chain 3, Iteration: 1001 / 2000 [ 50%]  (Sampling)
Chain 4, Iteration: 1000 / 2000 [ 50%]  (Warmup)
Chain 4, Iteration: 1001 / 2000 [ 50%]  (Sampling)
Chain 1, Iteration: 1200 / 2000 [ 60%]  (Sampling)
Chain 2, Iteration: 1200 / 2000 [ 60%]  (Sampling)
Chain 3, Iteration: 1200 / 2000 [ 60%]  (Sampling)
Chain 4, Iteration: 1200 / 2000 [ 60%]  (Sampling)
Chain 1, Iteration: 1400 / 2000 [ 70%]  (Sampling)
Chain 2, Iteration: 1400 / 2000 [ 70%]  (Sampling)
Chain 3, Iteration: 1400 / 2000 [ 70%]  (Sampling)
Chain 4, Iteration: 1400 / 2000 [ 70%]  (Sampling)
Chain 1, Iteration: 1600 / 2000 [ 80%]  (Sampling)
Chain 2, Iteration: 1600 / 2000 [ 80%]  (Sampling)
Chain 3, Iteration: 1600 / 2000 [ 80%]  (Sampling)
Chain 4, Iteration: 1600 / 2000 [ 80%]  (Sampling)
Chain 2, Iteration: 1800 / 2000 [ 90%]  (Sampling)
Chain 1, Iteration: 1800 / 2000 [ 90%]  (Sampling)
Chain 3, Iteration: 1800 / 2000 [ 90%]  (Sampling)
Chain 2, Iteration: 2000 / 2000 [100%]  (Sampling)
#  Elapsed Time: 29.9518 seconds (Warm-up)
#                24.2879 seconds (Sampling)
#                54.2397 seconds (Total)

The following numerical problems occured the indicated number of times after warmup on chain 2
                                                                                                     count
Exception thrown at line 97: inv_wishart_log: LDLT_Factor of random variable is not positive definit     1
When a numerical problem occurs, the Metropolis proposal gets rejected.
However, by design Metropolis proposals sometimes get rejected even when there are no numerical problems.
Thus, if the number in the 'count' column is small, do not ask about this message on stan-users.

Chain 4, Iteration: 1800 / 2000 [ 90%]  (Sampling)
Chain 1, Iteration: 2000 / 2000 [100%]  (Sampling)
#  Elapsed Time: 28.8015 seconds (Warm-up)
#                26.776 seconds (Sampling)
#                55.5775 seconds (Total)

The following numerical problems occured the indicated number of times after warmup on chain 1
                                                                                                     count
Exception thrown at line 97: inv_wishart_log: LDLT_Factor of random variable is not positive definit     6
When a numerical problem occurs, the Metropolis proposal gets rejected.
However, by design Metropolis proposals sometimes get rejected even when there are no numerical problems.
Thus, if the number in the 'count' column is small, do not ask about this message on stan-users.

Chain 3, Iteration: 2000 / 2000 [100%]  (Sampling)
#  Elapsed Time: 30.9368 seconds (Warm-up)
#                25.5483 seconds (Sampling)
#                56.4851 seconds (Total)

The following numerical problems occured the indicated number of times after warmup on chain 3
                                                                                                     count
Exception thrown at line 97: inv_wishart_log: LDLT_Factor of random variable is not positive definit     1
When a numerical problem occurs, the Metropolis proposal gets rejected.
However, by design Metropolis proposals sometimes get rejected even when there are no numerical problems.
Thus, if the number in the 'count' column is small, do not ask about this message on stan-users.

Chain 4, Iteration: 2000 / 2000 [100%]  (Sampling)
#  Elapsed Time: 31.0499 seconds (Warm-up)
#                26.5297 seconds (Sampling)
#                57.5797 seconds (Total)

The following numerical problems occured the indicated number of times after warmup on chain 4
                                                                                                     count
Exception thrown at line 97: inv_wishart_log: LDLT_Factor of random variable is not positive definit     6
When a numerical problem occurs, the Metropolis proposal gets rejected.
However, by design Metropolis proposals sometimes get rejected even when there are no numerical problems.
Thus, if the number in the 'count' column is small, do not ask about this message on stan-users.
> 
> ## Summarize posteriors
> print(cjs_temp_corr, digits = 3)
Inference for Stan model: cjs_temp_corr.
4 chains, each with iter=2000; warmup=1000; thin=1; 
post-warmup draws per chain=1000, total post-warmup draws=4000.

                   mean se_mean    sd      2.5%       25%       50%       75%
eta_phi[1,1]      0.807   0.008 0.421     0.079     0.519     0.770     1.058
eta_phi[1,2]      1.213   0.012 0.473     0.428     0.895     1.163     1.477
eta_phi[2,1]     -0.096   0.005 0.268    -0.598    -0.275    -0.100     0.076
eta_phi[2,2]      0.820   0.008 0.380     0.170     0.556     0.789     1.038
eta_phi[3,1]      0.594   0.006 0.307     0.052     0.381     0.573     0.782
eta_phi[3,2]      0.491   0.006 0.330    -0.112     0.264     0.475     0.701
eta_phi[4,1]      0.456   0.005 0.282    -0.063     0.264     0.443     0.633
eta_phi[4,2]      0.915   0.008 0.371     0.288     0.651     0.882     1.140
eta_phi[5,1]      0.124   0.004 0.268    -0.376    -0.060     0.119     0.298
eta_phi[5,2]      0.844   0.008 0.366     0.195     0.595     0.816     1.056
eta_phi[6,1]     -0.334   0.004 0.243    -0.798    -0.503    -0.335    -0.169
eta_phi[6,2]     -0.090   0.006 0.297    -0.647    -0.300    -0.097     0.108
eta_phi[7,1]      0.755   0.006 0.319     0.162     0.542     0.737     0.951
eta_phi[7,2]      0.698   0.007 0.378     0.035     0.437     0.673     0.927
eta_phi[8,1]      0.142   0.004 0.252    -0.333    -0.030     0.135     0.304
eta_phi[8,2]      0.451   0.006 0.314    -0.124     0.239     0.442     0.646
eta_phi[9,1]      0.591   0.006 0.294     0.036     0.393     0.576     0.777
eta_phi[9,2]      0.981   0.008 0.369     0.336     0.726     0.954     1.200
eta_phi[10,1]     0.177   0.005 0.260    -0.306    -0.007     0.167     0.346
eta_phi[10,2]     0.749   0.007 0.356     0.119     0.510     0.725     0.958
eta_phi[11,1]     0.705   0.007 0.364     0.068     0.448     0.676     0.923
eta_phi[11,2]     0.594   0.008 0.400    -0.130     0.324     0.568     0.842
p_g[1]            0.594   0.001 0.030     0.534     0.574     0.595     0.615
p_g[2]            0.322   0.001 0.024     0.276     0.306     0.322     0.339
Sigma[1,1]        0.742   0.009 0.375     0.298     0.486     0.646     0.904
Sigma[1,2]        0.081   0.005 0.189    -0.249    -0.024     0.061     0.167
Sigma[2,1]        0.081   0.005 0.189    -0.249    -0.024     0.061     0.167
Sigma[2,2]        0.355   0.007 0.232     0.104     0.200     0.293     0.433
mean_phi[1]       0.585   0.001 0.065     0.453     0.544     0.585     0.627
mean_phi[2]       0.663   0.001 0.045     0.577     0.634     0.664     0.691
lp__          -1635.288   0.132 4.380 -1644.607 -1638.109 -1634.966 -1632.174
                  97.5% n_eff  Rhat
eta_phi[1,1]      1.758  2625 1.001
eta_phi[1,2]      2.316  1470 1.001
eta_phi[2,1]      0.443  3431 1.000
eta_phi[2,2]      1.688  2351 1.000
eta_phi[3,1]      1.245  2855 1.000
eta_phi[3,2]      1.171  2735 1.000
eta_phi[4,1]      1.045  3029 1.001
eta_phi[4,2]      1.733  2081 1.000
eta_phi[5,1]      0.681  3564 1.000
eta_phi[5,2]      1.666  2331 1.000
eta_phi[6,1]      0.150  3568 0.999
eta_phi[6,2]      0.505  2291 1.001
eta_phi[7,1]      1.462  2826 1.000
eta_phi[7,2]      1.506  2692 1.000
eta_phi[8,1]      0.656  3242 0.999
eta_phi[8,2]      1.096  3185 1.000
eta_phi[9,1]      1.207  2691 1.001
eta_phi[9,2]      1.817  2354 1.000
eta_phi[10,1]     0.691  3315 1.000
eta_phi[10,2]     1.498  2676 1.000
eta_phi[11,1]     1.507  2539 1.001
eta_phi[11,2]     1.430  2444 1.001
p_g[1]            0.653  2672 1.001
p_g[2]            0.370  2110 1.001
Sigma[1,1]        1.712  1798 1.000
Sigma[1,2]        0.524  1553 1.001
Sigma[2,1]        0.524  1553 1.001
Sigma[2,2]        0.959   974 1.000
mean_phi[1]       0.710  2398 1.001
mean_phi[2]       0.752  2121 1.000
lp__          -1627.748  1109 1.003

Samples were drawn using NUTS(diag_e) at Wed Dec 16 23:18:29 2015.
For each parameter, n_eff is a crude measure of effective sample size,
and Rhat is the potential scale reduction factor on split chains (at 
convergence, Rhat=1).
> 
> proc.time()
   user  system elapsed 
 24.682   0.817  86.815 
