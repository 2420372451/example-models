
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ## 7. Estimation of survival probabilities using capture-recapture data
> ## 7.5. Models with individual variation
> ## 7.5.3. Individual random effects
> 
> library(rstan)
Loading required package: ggplot2
rstan (Version 2.8.1, packaged: 2015-11-18 17:18:35 UTC, GitRev: 05c3d0058b6a)
For execution on a local, multicore CPU with excess RAM we recommend calling
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
> rstan_options(auto_write = TRUE)
> options(mc.cores = parallel::detectCores())
> set.seed(123)
> 
> ## Read data
> ## The data generation code is in bpa-code.txt, available at
> ## http://www.vogelwarte.ch/de/projekte/publikationen/bpa/complete-code-and-data-files-of-the-book.html
> stan_data <- read_rdump("cjs_ind_raneff.data.R")
> 
> ## Initial values 
> inits <- function() list(mean_phi = runif(1, 0, 1),
+                          mean_p = runif(1, 0, 1),
+                          sigma = runif(1, 0, 2))
> 
> ## Parameters monitored
> params <- c("mean_phi", "mean_p", "sigma2")
> 
> ## MCMC settings
> ni <- 5000
> nt <- 4
> nb <- 1000
> nc <- 4
> 
> ## Call Stan from R
> cjs_ind_raneff  <- stan("cjs_ind_raneff.stan",
+                         data = stan_data, init = inits, pars = params,
+                         chains = nc, iter = ni, warmup = nb, thin = nt,
+                         seed = 1,
+                         open_progress = FALSE)
starting worker pid=8944 on localhost:11209 at 23:05:09.271
starting worker pid=8952 on localhost:11209 at 23:05:09.401
starting worker pid=8960 on localhost:11209 at 23:05:09.532
starting worker pid=8968 on localhost:11209 at 23:05:09.660

SAMPLING FOR MODEL 'cjs_ind_raneff' NOW (CHAIN 1).

Chain 1, Iteration:    1 / 5000 [  0%]  (Warmup)
SAMPLING FOR MODEL 'cjs_ind_raneff' NOW (CHAIN 2).

Chain 2, Iteration:    1 / 5000 [  0%]  (Warmup)
SAMPLING FOR MODEL 'cjs_ind_raneff' NOW (CHAIN 3).

Chain 3, Iteration:    1 / 5000 [  0%]  (Warmup)
SAMPLING FOR MODEL 'cjs_ind_raneff' NOW (CHAIN 4).

Chain 4, Iteration:    1 / 5000 [  0%]  (Warmup)
Chain 1, Iteration:  500 / 5000 [ 10%]  (Warmup)
Chain 4, Iteration:  500 / 5000 [ 10%]  (Warmup)
Chain 3, Iteration:  500 / 5000 [ 10%]  (Warmup)
Chain 2, Iteration:  500 / 5000 [ 10%]  (Warmup)
Chain 1, Iteration: 1000 / 5000 [ 20%]  (Warmup)
Chain 1, Iteration: 1001 / 5000 [ 20%]  (Sampling)
Chain 4, Iteration: 1000 / 5000 [ 20%]  (Warmup)
Chain 4, Iteration: 1001 / 5000 [ 20%]  (Sampling)
Chain 3, Iteration: 1000 / 5000 [ 20%]  (Warmup)
Chain 3, Iteration: 1001 / 5000 [ 20%]  (Sampling)
Chain 2, Iteration: 1000 / 5000 [ 20%]  (Warmup)
Chain 2, Iteration: 1001 / 5000 [ 20%]  (Sampling)
Chain 1, Iteration: 1500 / 5000 [ 30%]  (Sampling)
Chain 1, Iteration: 2000 / 5000 [ 40%]  (Sampling)
Chain 4, Iteration: 1500 / 5000 [ 30%]  (Sampling)
Chain 3, Iteration: 1500 / 5000 [ 30%]  (Sampling)
Chain 2, Iteration: 1500 / 5000 [ 30%]  (Sampling)
Chain 1, Iteration: 2500 / 5000 [ 50%]  (Sampling)
Chain 4, Iteration: 2000 / 5000 [ 40%]  (Sampling)
Chain 3, Iteration: 2000 / 5000 [ 40%]  (Sampling)
Chain 2, Iteration: 2000 / 5000 [ 40%]  (Sampling)
Chain 1, Iteration: 3000 / 5000 [ 60%]  (Sampling)
Chain 4, Iteration: 2500 / 5000 [ 50%]  (Sampling)
Chain 1, Iteration: 3500 / 5000 [ 70%]  (Sampling)
Chain 3, Iteration: 2500 / 5000 [ 50%]  (Sampling)
Chain 2, Iteration: 2500 / 5000 [ 50%]  (Sampling)
Chain 1, Iteration: 4000 / 5000 [ 80%]  (Sampling)
Chain 4, Iteration: 3000 / 5000 [ 60%]  (Sampling)
Chain 3, Iteration: 3000 / 5000 [ 60%]  (Sampling)
Chain 2, Iteration: 3000 / 5000 [ 60%]  (Sampling)
Chain 1, Iteration: 4500 / 5000 [ 90%]  (Sampling)
Chain 1, Iteration: 5000 / 5000 [100%]  (Sampling)
#  Elapsed Time: 64.9775 seconds (Warm-up)
#                183.41 seconds (Sampling)
#                248.388 seconds (Total)


Chain 4, Iteration: 3500 / 5000 [ 70%]  (Sampling)
Chain 3, Iteration: 3500 / 5000 [ 70%]  (Sampling)
Chain 2, Iteration: 3500 / 5000 [ 70%]  (Sampling)
Chain 4, Iteration: 4000 / 5000 [ 80%]  (Sampling)
Chain 2, Iteration: 4000 / 5000 [ 80%]  (Sampling)
Chain 3, Iteration: 4000 / 5000 [ 80%]  (Sampling)
Chain 4, Iteration: 4500 / 5000 [ 90%]  (Sampling)
Chain 2, Iteration: 4500 / 5000 [ 90%]  (Sampling)
Chain 3, Iteration: 4500 / 5000 [ 90%]  (Sampling)
Chain 2, Iteration: 5000 / 5000 [100%]  (Sampling)
#  Elapsed Time: 77.773 seconds (Warm-up)
#                260.347 seconds (Sampling)
#                338.12 seconds (Total)

The following numerical problems occured the indicated number of times after warmup on chain 2
                                                                                count
Exception thrown at line 91: normal_log: Scale parameter is 0, but must be > 0!     1
When a numerical problem occurs, the Metropolis proposal gets rejected.
However, by design Metropolis proposals sometimes get rejected even when there are no numerical problems.
Thus, if the number in the 'count' column is small, do not ask about this message on stan-users.

Chain 4, Iteration: 5000 / 5000 [100%]  (Sampling)
#  Elapsed Time: 69.5451 seconds (Warm-up)
#                268.528 seconds (Sampling)
#                338.073 seconds (Total)

The following numerical problems occured the indicated number of times after warmup on chain 4
                                                                                count
Exception thrown at line 91: normal_log: Scale parameter is 0, but must be > 0!     1
When a numerical problem occurs, the Metropolis proposal gets rejected.
However, by design Metropolis proposals sometimes get rejected even when there are no numerical problems.
Thus, if the number in the 'count' column is small, do not ask about this message on stan-users.

Chain 3, Iteration: 5000 / 5000 [100%]  (Sampling)
#  Elapsed Time: 75.5818 seconds (Warm-up)
#                268.093 seconds (Sampling)
#                343.675 seconds (Total)

The following numerical problems occured the indicated number of times after warmup on chain 3
                                                                                count
Exception thrown at line 91: normal_log: Scale parameter is 0, but must be > 0!     1
When a numerical problem occurs, the Metropolis proposal gets rejected.
However, by design Metropolis proposals sometimes get rejected even when there are no numerical problems.
Thus, if the number in the 'count' column is small, do not ask about this message on stan-users.
> 
> ## Summarize posteriors
> print(cjs_ind_raneff, digits = 3)
Inference for Stan model: cjs_ind_raneff.
4 chains, each with iter=5000; warmup=1000; thin=4; 
post-warmup draws per chain=1000, total post-warmup draws=4000.

              mean se_mean     sd      2.5%       25%       50%       75%
mean_phi     0.646   0.001  0.026     0.590     0.630     0.648     0.664
mean_p       0.399   0.000  0.021     0.359     0.385     0.399     0.413
sigma2       0.641   0.018  0.246     0.248     0.470     0.610     0.777
lp__     -1262.378   7.830 99.168 -1438.946 -1328.884 -1269.525 -1204.901
             97.5% n_eff  Rhat
mean_phi     0.693   548 1.012
mean_p       0.440  2066 1.002
sigma2       1.224   186 1.021
lp__     -1039.630   160 1.028

Samples were drawn using NUTS(diag_e) at Wed Dec 16 23:10:56 2015.
For each parameter, n_eff is a crude measure of effective sample size,
and Rhat is the potential scale reduction factor on split chains (at 
convergence, Rhat=1).
> 
> proc.time()
   user  system elapsed 
 20.676   0.716 368.334 
