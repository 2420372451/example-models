
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ## 7. Estimation of survival probabilities using capture-recapture data
> ## 7.4. Models with time-variation
> ## 7.4.1. Fixed time effects
> 
> library(rstan)
Loading required package: ggplot2
rstan (Version 2.8.1, packaged: 2015-11-18 17:18:35 UTC, GitRev: 05c3d0058b6a)
For execution on a local, multicore CPU with excess RAM we recommend calling
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
> rstan_options(auto_write = TRUE)
> options(mc.cores = parallel::detectCores())
> set.seed(123)
> 
> ## Read data
> ## The data generation code is in bpa-code.txt, available at
> ## http://www.vogelwarte.ch/de/projekte/publikationen/bpa/complete-code-and-data-files-of-the-book.html
> stan_data <- read_rdump("cjs_c_c.data.R")
> 
> ## Initial values
> inits <- function(){list(mean_phi = runif(1, 0, 1),
+                          mean_p = runif(1, 0, 1))}
> 
> ## Parameters monitored
> params <- c("alpha", "beta")
> 
> ## MCMC settings
> ni <- 4000
> nt <- 3
> nb <- 1000
> nc <- 4
> 
> ## Call Stan from R
> cjs_temp_fixeff <- stan("cjs_temp_fixeff.stan",
+                         data = stan_data, init = inits, pars = params,
+                         chains = nc, iter = ni, warmup = nb, thin = nt,
+                         seed = 1,
+                         open_progress = FALSE)
starting worker pid=8293 on localhost:11341 at 22:55:37.234
starting worker pid=8301 on localhost:11341 at 22:55:37.368
starting worker pid=8309 on localhost:11341 at 22:55:37.504
starting worker pid=8317 on localhost:11341 at 22:55:37.639

SAMPLING FOR MODEL 'cjs_temp_fixeff' NOW (CHAIN 1).

Chain 1, Iteration:    1 / 4000 [  0%]  (Warmup)
SAMPLING FOR MODEL 'cjs_temp_fixeff' NOW (CHAIN 2).

Chain 2, Iteration:    1 / 4000 [  0%]  (Warmup)
SAMPLING FOR MODEL 'cjs_temp_fixeff' NOW (CHAIN 3).

Chain 3, Iteration:    1 / 4000 [  0%]  (Warmup)
SAMPLING FOR MODEL 'cjs_temp_fixeff' NOW (CHAIN 4).

Chain 4, Iteration:    1 / 4000 [  0%]  (Warmup)
Chain 1, Iteration:  400 / 4000 [ 10%]  (Warmup)
Chain 3, Iteration:  400 / 4000 [ 10%]  (Warmup)
Chain 1, Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 4, Iteration:  400 / 4000 [ 10%]  (Warmup)
Chain 2, Iteration:  400 / 4000 [ 10%]  (Warmup)
Chain 1, Iteration: 1001 / 4000 [ 25%]  (Sampling)
Chain 3, Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 2, Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 4, Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 2, Iteration: 1001 / 4000 [ 25%]  (Sampling)
Chain 3, Iteration: 1001 / 4000 [ 25%]  (Sampling)
Chain 1, Iteration: 1400 / 4000 [ 35%]  (Sampling)
Chain 4, Iteration: 1001 / 4000 [ 25%]  (Sampling)
Chain 2, Iteration: 1400 / 4000 [ 35%]  (Sampling)
Chain 3, Iteration: 1400 / 4000 [ 35%]  (Sampling)
Chain 4, Iteration: 1400 / 4000 [ 35%]  (Sampling)
Chain 1, Iteration: 1800 / 4000 [ 45%]  (Sampling)
Chain 2, Iteration: 1800 / 4000 [ 45%]  (Sampling)
Chain 4, Iteration: 1800 / 4000 [ 45%]  (Sampling)
Chain 3, Iteration: 1800 / 4000 [ 45%]  (Sampling)
Chain 1, Iteration: 2200 / 4000 [ 55%]  (Sampling)
Chain 2, Iteration: 2200 / 4000 [ 55%]  (Sampling)
Chain 4, Iteration: 2200 / 4000 [ 55%]  (Sampling)
Chain 3, Iteration: 2200 / 4000 [ 55%]  (Sampling)
Chain 1, Iteration: 2600 / 4000 [ 65%]  (Sampling)
Chain 2, Iteration: 2600 / 4000 [ 65%]  (Sampling)
Chain 4, Iteration: 2600 / 4000 [ 65%]  (Sampling)
Chain 3, Iteration: 2600 / 4000 [ 65%]  (Sampling)
Chain 1, Iteration: 3000 / 4000 [ 75%]  (Sampling)
Chain 2, Iteration: 3000 / 4000 [ 75%]  (Sampling)
Chain 4, Iteration: 3000 / 4000 [ 75%]  (Sampling)
Chain 3, Iteration: 3000 / 4000 [ 75%]  (Sampling)
Chain 1, Iteration: 3400 / 4000 [ 85%]  (Sampling)
Chain 4, Iteration: 3400 / 4000 [ 85%]  (Sampling)
Chain 2, Iteration: 3400 / 4000 [ 85%]  (Sampling)
Chain 3, Iteration: 3400 / 4000 [ 85%]  (Sampling)
Chain 1, Iteration: 3800 / 4000 [ 95%]  (Sampling)
Chain 4, Iteration: 3800 / 4000 [ 95%]  (Sampling)
Chain 2, Iteration: 3800 / 4000 [ 95%]  (Sampling)
Chain 1, Iteration: 4000 / 4000 [100%]  (Sampling)
#  Elapsed Time: 3.63759 seconds (Warm-up)
#                16.5054 seconds (Sampling)
#                20.143 seconds (Total)


Chain 4, Iteration: 4000 / 4000 [100%]  (Sampling)
#  Elapsed Time: 4.49427 seconds (Warm-up)
#                14.247 seconds (Sampling)
#                18.7413 seconds (Total)


Chain 2, Iteration: 4000 / 4000 [100%]  (Sampling)
#  Elapsed Time: 5.00309 seconds (Warm-up)
#                14.9337 seconds (Sampling)
#                19.9368 seconds (Total)


Chain 3, Iteration: 3800 / 4000 [ 95%]  (Sampling)
Chain 3, Iteration: 4000 / 4000 [100%]  (Sampling)
#  Elapsed Time: 4.52191 seconds (Warm-up)
#                16.3877 seconds (Sampling)
#                20.9097 seconds (Total)

> 
> ## Summarize posteriors
> print(cjs_temp_fixeff, digits = 3)
Inference for Stan model: cjs_temp_fixeff.
4 chains, each with iter=4000; warmup=1000; thin=3; 
post-warmup draws per chain=1000, total post-warmup draws=4000.

             mean se_mean    sd     2.5%      25%      50%      75%    97.5%
alpha[1]    0.719   0.002 0.141    0.451    0.616    0.720    0.823    0.974
alpha[2]    0.505   0.002 0.116    0.312    0.422    0.492    0.576    0.768
alpha[3]    0.563   0.002 0.107    0.378    0.487    0.552    0.628    0.806
alpha[4]    0.752   0.002 0.136    0.487    0.651    0.754    0.860    0.980
alpha[5]    0.505   0.004 0.227    0.190    0.312    0.462    0.678    0.957
beta[1]     0.376   0.002 0.103    0.201    0.302    0.365    0.441    0.598
beta[2]     0.343   0.002 0.092    0.186    0.277    0.337    0.402    0.541
beta[3]     0.544   0.002 0.098    0.357    0.476    0.544    0.612    0.736
beta[4]     0.338   0.001 0.079    0.204    0.282    0.331    0.386    0.514
beta[5]     0.498   0.004 0.226    0.187    0.303    0.451    0.667    0.961
lp__     -294.078   0.042 2.414 -299.672 -295.408 -293.758 -292.310 -290.357
         n_eff  Rhat
alpha[1]  3617 1.000
alpha[2]  3420 1.000
alpha[3]  3525 1.000
alpha[4]  3304 1.001
alpha[5]  3417 1.000
beta[1]   3653 1.000
beta[2]   3690 1.000
beta[3]   3221 1.000
beta[4]   3539 1.000
beta[5]   3658 0.999
lp__      3329 1.000

Samples were drawn using NUTS(diag_e) at Wed Dec 16 22:56:01 2015.
For each parameter, n_eff is a crude measure of effective sample size,
and Rhat is the potential scale reduction factor on split chains (at 
convergence, Rhat=1).
> 
> proc.time()
   user  system elapsed 
 20.887   0.737  45.596 
