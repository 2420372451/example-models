
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ## 7. Estimation of survival probabilities using capture-recapture data
> ## 7.5. Models with individual variation
> ## 7.5.1. Fixed group effects
> 
> library(rstan)
Loading required package: ggplot2
rstan (Version 2.8.1, packaged: 2015-11-18 17:18:35 UTC, GitRev: 05c3d0058b6a)
For execution on a local, multicore CPU with excess RAM we recommend calling
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
> rstan_options(auto_write = TRUE)
> options(mc.cores = parallel::detectCores())
> set.seed(123)
> 
> ## Read data
> ## The data generation code is in bpa-code.txt, available at
> ## http://www.vogelwarte.ch/de/projekte/publikationen/bpa/complete-code-and-data-files-of-the-book.html
> stan_data <- read_rdump("cjs_group.data.R")
> 
> ## Parameters monitored
> params <- c("phi_g", "p_g")
> 
> ## MCMC settings
> ni <- 4000
> nt <- 3
> nb <- 1000
> nc <- 4
> 
> ## Initial values
> inits <- lapply(1:nc, function(i) {
+     list(phi_g = runif(length(unique(stan_data$group)), 0, 1),
+          p_g = runif(length(unique(stan_data$group)), 0, 1))})
> 
> ## Call Stan from R
> cjs_group <- stan("cjs_group.stan",
+                   data = stan_data, init = inits, pars = params,
+                   chains = nc, iter = ni, warmup = nb, thin = nt,
+                   seed = 1,
+                   open_progress = FALSE)
starting worker pid=8683 on localhost:11389 at 23:00:50.048
starting worker pid=8691 on localhost:11389 at 23:00:50.176
starting worker pid=8699 on localhost:11389 at 23:00:50.312
starting worker pid=8707 on localhost:11389 at 23:00:50.451

SAMPLING FOR MODEL 'cjs_group' NOW (CHAIN 1).

Chain 1, Iteration:    1 / 4000 [  0%]  (Warmup)
SAMPLING FOR MODEL 'cjs_group' NOW (CHAIN 2).

Chain 2, Iteration:    1 / 4000 [  0%]  (Warmup)
SAMPLING FOR MODEL 'cjs_group' NOW (CHAIN 3).

Chain 3, Iteration:    1 / 4000 [  0%]  (Warmup)
SAMPLING FOR MODEL 'cjs_group' NOW (CHAIN 4).

Chain 4, Iteration:    1 / 4000 [  0%]  (Warmup)
Chain 1, Iteration:  400 / 4000 [ 10%]  (Warmup)
Chain 2, Iteration:  400 / 4000 [ 10%]  (Warmup)
Chain 3, Iteration:  400 / 4000 [ 10%]  (Warmup)
Chain 4, Iteration:  400 / 4000 [ 10%]  (Warmup)
Chain 1, Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 2, Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 3, Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 1, Iteration: 1001 / 4000 [ 25%]  (Sampling)
Chain 4, Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 2, Iteration: 1001 / 4000 [ 25%]  (Sampling)
Chain 3, Iteration: 1001 / 4000 [ 25%]  (Sampling)
Chain 4, Iteration: 1001 / 4000 [ 25%]  (Sampling)
Chain 1, Iteration: 1400 / 4000 [ 35%]  (Sampling)
Chain 2, Iteration: 1400 / 4000 [ 35%]  (Sampling)
Chain 3, Iteration: 1400 / 4000 [ 35%]  (Sampling)
Chain 4, Iteration: 1400 / 4000 [ 35%]  (Sampling)
Chain 2, Iteration: 1800 / 4000 [ 45%]  (Sampling)
Chain 1, Iteration: 1800 / 4000 [ 45%]  (Sampling)
Chain 3, Iteration: 1800 / 4000 [ 45%]  (Sampling)
Chain 4, Iteration: 1800 / 4000 [ 45%]  (Sampling)
Chain 2, Iteration: 2200 / 4000 [ 55%]  (Sampling)
Chain 3, Iteration: 2200 / 4000 [ 55%]  (Sampling)
Chain 1, Iteration: 2200 / 4000 [ 55%]  (Sampling)
Chain 4, Iteration: 2200 / 4000 [ 55%]  (Sampling)
Chain 2, Iteration: 2600 / 4000 [ 65%]  (Sampling)
Chain 3, Iteration: 2600 / 4000 [ 65%]  (Sampling)
Chain 1, Iteration: 2600 / 4000 [ 65%]  (Sampling)
Chain 2, Iteration: 3000 / 4000 [ 75%]  (Sampling)
Chain 4, Iteration: 2600 / 4000 [ 65%]  (Sampling)
Chain 3, Iteration: 3000 / 4000 [ 75%]  (Sampling)
Chain 1, Iteration: 3000 / 4000 [ 75%]  (Sampling)
Chain 2, Iteration: 3400 / 4000 [ 85%]  (Sampling)
Chain 4, Iteration: 3000 / 4000 [ 75%]  (Sampling)
Chain 3, Iteration: 3400 / 4000 [ 85%]  (Sampling)
Chain 1, Iteration: 3400 / 4000 [ 85%]  (Sampling)
Chain 2, Iteration: 3800 / 4000 [ 95%]  (Sampling)
Chain 4, Iteration: 3400 / 4000 [ 85%]  (Sampling)
Chain 3, Iteration: 3800 / 4000 [ 95%]  (Sampling)
Chain 2, Iteration: 4000 / 4000 [100%]  (Sampling)
#  Elapsed Time: 7.12596 seconds (Warm-up)
#                20.9627 seconds (Sampling)
#                28.0886 seconds (Total)


Chain 3, Iteration: 4000 / 4000 [100%]  (Sampling)
#  Elapsed Time: 6.94807 seconds (Warm-up)
#                21.827 seconds (Sampling)
#                28.7751 seconds (Total)


Chain 1, Iteration: 3800 / 4000 [ 95%]  (Sampling)
Chain 4, Iteration: 3800 / 4000 [ 95%]  (Sampling)
Chain 1, Iteration: 4000 / 4000 [100%]  (Sampling)
#  Elapsed Time: 6.9974 seconds (Warm-up)
#                24.4455 seconds (Sampling)
#                31.4429 seconds (Total)


Chain 4, Iteration: 4000 / 4000 [100%]  (Sampling)
#  Elapsed Time: 7.23189 seconds (Warm-up)
#                23.9364 seconds (Sampling)
#                31.1682 seconds (Total)

> 
> ## Summarize posteriors
> print(cjs_group, digits = 3)
Inference for Stan model: cjs_group.
4 chains, each with iter=4000; warmup=1000; thin=3; 
post-warmup draws per chain=1000, total post-warmup draws=4000.

              mean se_mean    sd      2.5%       25%       50%       75%
phi_g[1]     0.630   0.000 0.020     0.591     0.616     0.630     0.644
phi_g[2]     0.790   0.000 0.018     0.755     0.779     0.791     0.803
p_g[1]       0.688   0.000 0.030     0.631     0.668     0.688     0.709
p_g[2]       0.333   0.000 0.022     0.291     0.318     0.333     0.347
lp__     -1325.803   0.026 1.403 -1329.308 -1326.479 -1325.480 -1324.780
             97.5% n_eff  Rhat
phi_g[1]     0.670  3552 1.000
phi_g[2]     0.826  3606 1.000
p_g[1]       0.745  3690 1.000
p_g[2]       0.378  3807 1.000
lp__     -1324.010  2939 1.001

Samples were drawn using NUTS(diag_e) at Wed Dec 16 23:01:24 2015.
For each parameter, n_eff is a crude measure of effective sample size,
and Rhat is the potential scale reduction factor on split chains (at 
convergence, Rhat=1).
> 
> proc.time()
   user  system elapsed 
 19.713   0.654  54.971 
